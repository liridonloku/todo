(()=>{"use strict";var n={426:(n,e,t)=>{t.d(e,{Z:()=>s});var r=t(15),a=t.n(r),i=t(645),o=t.n(i)()(a());o.push([n.id,':root{\n    --white: #f2f5f7;\n    --blue: #20a4f3; \n    --turquoise: #59f8e8;\n    --crimson: #941c2f;\n    --black: #03191e;\n}\n\nbody{\n    position: relative;\n    margin: 0;\n    font-family: \'Open Sans\', sans-serif;\n    color: var(--black);\n    background-color: var(--white);\n}\n\n.task-details{\n    font-size: 14px;\n    padding: 10px;\n    z-index: 2;\n    position: absolute;\n    top: 0;\n    bottom: 0;\n    right: 0;\n    left: 0;\n    margin: auto;\n    background-color: var(--white);\n    border-radius: 4px;\n    width: 400px;\n    height: 85%;\n    max-height: 400px;\n    box-shadow: 0 0 5px gray;\n    display: none;\n    flex-direction: column;\n}\n\n.task-details-header{\n    font-size: 16px;\n    color: var(--blue);\n    font-weight: bold;\n    margin-bottom: 10px;\n}\n\n.task-details-title{\n    font-size: 16px;\n    margin-bottom: 5px;\n    word-break: break-word;\n}\n\n.task-details-description{\n    flex-grow: 1;\n    word-break: break-word;\n    white-space: pre-wrap;\n}\n\n.task-details-priority{\n    margin-bottom: 5px;\n}\n\n.task-details-date{\n    margin-bottom: 5px;\n}\n\n.task-details-project{\n    margin-bottom: 5px;\n    word-break: break-word;\n}\n\n.task-details-buttons{\n    display: flex;\n    justify-content: space-around;\n    align-items: center;\n    height: 30px;\n}\n\n.task-details-buttons>button{\n    cursor: pointer;\n    width: 34%;\n    height: 100%;\n    border-radius: 5px;\n    font-size: 16px;\n    background: none;\n    border: none;\n    background-color: var(--blue);\n    color: var(--white);\n}\n\n.task-form-overlay{\n    display: none;\n    position: absolute;\n    width: 100vw;\n    height: 100vh;\n    top: 0;\n    bottom: 0;\n    right: 0;\n    left: 0;\n    margin: auto;\n}\n\n.task-form{\n    font-size: 14px;\n    padding: 5px;\n    z-index: 2;\n    position: absolute;\n    top: 0;\n    bottom: 0;\n    right: 0;\n    left: 0;\n    margin: auto;\n    background-color: var(--white);\n    border-radius: 4px;\n    width: 400px;\n    height: 400px;\n    box-shadow: 0 0 5px gray;\n    display: none;\n    flex-direction: column;\n}\n\n.task-form>div{\n    height: 25px;\n}\n\n.task-form>input{\n    height: 19px;\n    border: none;\n    background: none;\n    box-shadow: 0 0 2px gray;\n    margin-bottom: 5px;\n}\n\n.task-form>textarea{\n    flex-grow: 1;\n    border: none;\n    background: none;\n    box-shadow: 0 0 2px gray;\n    margin-bottom: 5px;\n    resize: none;\n    overflow: auto;\n}\n\n.task-form>select{\n    border: none;\n    background: none;\n    box-shadow: 0 0 2px gray;\n    margin-bottom: 5px;\n}\n\n.task-form>.form-buttons{\n    height: 40px;\n    display: flex;\n    justify-content: space-around;\n    align-items: center;\n}\n\n.task-form>.form-buttons>button{\n    cursor: pointer;\n    width: 34%;\n    height: 66%;\n    border-radius: 5px;\n    font-size: 14px;\n    background: none;\n    border: none;\n    background-color: var(--blue);\n    color: var(--white);\n}\n\n.task-form>.form-buttons>button:hover{\n    background-color: var(--turquoise);\n    color: var(--black);\n    box-shadow: 0 0 2px var(--black);\n}\n\n.project-form{\n    font-size: 14px;\n    padding: 5px;\n    z-index: 2;\n    position: absolute;\n    top: 0;\n    bottom: 0;\n    right: 0;\n    left: 0;\n    margin: auto;\n    background-color: var(--white);\n    border-radius: 4px;\n    width: 400px;\n    height: 90px;\n    box-shadow: 0 0 5px gray;\n    display: none;\n    flex-direction: column;\n    justify-content: space-between;\n}\n\n.project-form>div{\n    height: 25px;\n    display: flex;\n    align-items: center;\n}\n\n.project-form>input{\n    border: none;\n    background: none;\n    box-shadow: 0 0 2px gray;\n    margin-bottom: 5px;\n}\n\n.project-form>.form-buttons{\n    display: flex;\n    justify-content: space-around;\n    flex-grow: 1;\n    align-items: center;\n}\n\n.project-form>.form-buttons>button{\n    cursor: pointer;\n    width: 34%;\n    height: 66%;\n    border-radius: 5px;\n    font-size: 14px;\n    background: none;\n    border: none;\n    background-color: var(--blue);\n    color: var(--white);\n}\n\n.project-form>.form-buttons>button:hover{\n    background-color: var(--turquoise);\n    color: var(--black);\n    box-shadow: 0 0 2px var(--black);\n}\n\n.content{\n    display: flex;\n    flex-direction: column;\n    min-height: 100vh;\n}\n\n.header{\n    background-color: var(--blue);\n    color: var(--white);\n    display: flex;\n    width: 100%;\n    height: 40px;\n    align-items: center;\n}\n\n#menu{\n    display: none;\n    cursor: pointer;\n    width: 30px;\n    text-align: center;\n    font-size: 32px;\n}\n\n#title{\n    cursor: default;\n    padding-right: 30px;\n    flex-grow: 1;\n    text-align: center;\n    font-size: 32px;\n}\n\n.main{\n    flex-grow: 1;\n    display: flex;\n}\n\n.side-panel{\n    position: relative;\n    width: 250px;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n}\n\n.side-panel::after{\n    content: "";\n    background-color: lightgray;\n    position: absolute;\n    top: 5px;\n    right: 0;\n    bottom: 5px;\n    width: 1px;\n}\n\n.views{\n    width: 100%;\n    position: relative;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n}\n\n.views>div{\n    width: 100%;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    height: 40px;\n    cursor: pointer;\n    color:var(--blue);\n}\n\n.views::after{\n    position: absolute;\n    background-color: lightgray;\n    content: "";\n    bottom: 0;\n    left: 20px;\n    right: 20px;\n    height: 1px;\n}\n\n.projects{\n    width: 100%;\n    flex-grow: 1;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n}\n\n.projects>div{\n    display: flex;\n    align-items: center;\n    height: 40px;\n    cursor: pointer;\n    color:var(--blue);\n}\n\n#new-project-container{\n    display: flex;\n    width: calc(100% - 40px);\n    padding-left: 20px;\n    padding-right: 20px;\n    cursor: default;\n}\n\n#projects-title{\n    flex-grow: 1;\n    cursor: default;\n}\n\n#new-project{\n    cursor: pointer;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    width: 30px;\n    height: 30px;\n    font-size: 20px;\n    border-radius: 50%;\n}\n\n#new-project:hover{\n    background-color: var(--blue);\n    color: var(--white);\n}\n\n.project-container{\n    width: 100%;\n    padding-left: 20px;\n    padding-right: 20px;\n    display: flex;\n    flex-direction: column;\n    flex-grow: 1;\n    justify-content: flex-start;\n}\n\n.single-project{\n    width: calc(100% - 40px);\n    height: 40px;\n    display: flex;\n    align-items: center;\n}\n\n.project-name{\n    flex-grow: 1;\n    height: 100%;\n    display: flex;\n    align-items: center;\n    word-break: break-word;\n}\n\n.edit-project{\n    cursor: pointer;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    width: 24px;\n    height: 100%;\n    border-radius: 50%;\n}\n\n.delete-project{\n    cursor: pointer;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    width: 24px;\n    height: 100%;\n    border-radius: 50%;\n}\n\n.tasks{\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    flex-grow: 1;\n}\n\n.tasks-title{\n    color: var(--blue);\n    font-size: 20px;\n    display: flex;\n    width: 90%;\n    max-width: 800px;\n    justify-content: space-between;\n    align-items: center;\n    height: 40px;\n}\n\n#new-task{\n    cursor: pointer;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    width: 30px;\n    height: 30px;\n    font-size: 20px;\n    border-radius: 50%;\n}\n\n#new-task:hover{\n    background-color: var(--blue);\n    color: var(--white);\n}\n\n.task-container{\n    width: 100%;\n    flex-grow: 1;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n}\n\n.task-card{\n    width: 90%;\n    min-width: 300px;\n    max-width: 800px;\n    height: 40px;\n    display: flex;\n    align-items: center;\n    border-radius: 5px;\n    box-shadow: 0 0 3px gray;\n    margin-bottom: 10px;\n    padding-left: 3px;\n    padding-right: 3px;\n}\n\n.priority-high{\n    width: 10px;\n    height: 10px;\n    margin-right: 5px;\n    border-radius: 50%;\n    background-color: red;\n    text-align: center;\n}\n\n.priority-medium{\n    width: 10px;\n    height: 10px;\n    margin-right: 5px;\n    border-radius: 50%;\n    background-color: orange;\n    text-align: center;\n}\n\n.priority-low{\n    width: 10px;\n    height: 10px;\n    margin-right: 5px;\n    border-radius: 50%;\n    background-color: green;\n    text-align: center;\n}\n\n.task-title{\n    flex-grow: 1;\n    height: 100%;\n    display: flex;\n    align-items: center;\n    cursor: pointer;\n    word-break: break-word;\n}\n\n.edit-task{\n    cursor: pointer;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    width: 24px;\n    height: 100%;\n    opacity: 60%;\n}\n\n.delete-task{\n    cursor: pointer;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    width: 24px;\n    height: 100%;\n    opacity: 60%;\n}\n\n.footer{\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    height: 20px;\n    background-color: var(--white);\n    color: var(--black)\n}\n\n.footer>p>a{\n    text-decoration: none;\n    color: var(--black);\n}\n\n\n@media screen and (max-width: 420px) {\n    .main{\n        display: block;\n        position: relative;\n    }\n\n    #menu{\n        display: block;\n        text-align: end;\n        padding-right: 5px;\n    }\n\n    .side-panel{\n        display: none;\n        position: absolute;\n        left: 0;\n        z-index: 1;\n        background-color: var(--white);\n        height: 100%;\n    }\n\n    .tasks{\n        height: 100%;\n    }\n\n    .project-form{\n        min-width: 300px;\n        width: 95%;\n    }\n\n    .task-form{\n        min-width: 300px;\n        width: 95%;\n    }\n\n    .task-details{\n        min-width: 300px;\n        width: 95%;\n    }\n    \n}',"",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"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",sourcesContent:[':root{\n    --white: #f2f5f7;\n    --blue: #20a4f3; \n    --turquoise: #59f8e8;\n    --crimson: #941c2f;\n    --black: #03191e;\n}\n\nbody{\n    position: relative;\n    margin: 0;\n    font-family: \'Open Sans\', sans-serif;\n    color: var(--black);\n    background-color: var(--white);\n}\n\n.task-details{\n    font-size: 14px;\n    padding: 10px;\n    z-index: 2;\n    position: absolute;\n    top: 0;\n    bottom: 0;\n    right: 0;\n    left: 0;\n    margin: auto;\n    background-color: var(--white);\n    border-radius: 4px;\n    width: 400px;\n    height: 85%;\n    max-height: 400px;\n    box-shadow: 0 0 5px gray;\n    display: none;\n    flex-direction: column;\n}\n\n.task-details-header{\n    font-size: 16px;\n    color: var(--blue);\n    font-weight: bold;\n    margin-bottom: 10px;\n}\n\n.task-details-title{\n    font-size: 16px;\n    margin-bottom: 5px;\n    word-break: break-word;\n}\n\n.task-details-description{\n    flex-grow: 1;\n    word-break: break-word;\n    white-space: pre-wrap;\n}\n\n.task-details-priority{\n    margin-bottom: 5px;\n}\n\n.task-details-date{\n    margin-bottom: 5px;\n}\n\n.task-details-project{\n    margin-bottom: 5px;\n    word-break: break-word;\n}\n\n.task-details-buttons{\n    display: flex;\n    justify-content: space-around;\n    align-items: center;\n    height: 30px;\n}\n\n.task-details-buttons>button{\n    cursor: pointer;\n    width: 34%;\n    height: 100%;\n    border-radius: 5px;\n    font-size: 16px;\n    background: none;\n    border: none;\n    background-color: var(--blue);\n    color: var(--white);\n}\n\n.task-form-overlay{\n    display: none;\n    position: absolute;\n    width: 100vw;\n    height: 100vh;\n    top: 0;\n    bottom: 0;\n    right: 0;\n    left: 0;\n    margin: auto;\n}\n\n.task-form{\n    font-size: 14px;\n    padding: 5px;\n    z-index: 2;\n    position: absolute;\n    top: 0;\n    bottom: 0;\n    right: 0;\n    left: 0;\n    margin: auto;\n    background-color: var(--white);\n    border-radius: 4px;\n    width: 400px;\n    height: 400px;\n    box-shadow: 0 0 5px gray;\n    display: none;\n    flex-direction: column;\n}\n\n.task-form>div{\n    height: 25px;\n}\n\n.task-form>input{\n    height: 19px;\n    border: none;\n    background: none;\n    box-shadow: 0 0 2px gray;\n    margin-bottom: 5px;\n}\n\n.task-form>textarea{\n    flex-grow: 1;\n    border: none;\n    background: none;\n    box-shadow: 0 0 2px gray;\n    margin-bottom: 5px;\n    resize: none;\n    overflow: auto;\n}\n\n.task-form>select{\n    border: none;\n    background: none;\n    box-shadow: 0 0 2px gray;\n    margin-bottom: 5px;\n}\n\n.task-form>.form-buttons{\n    height: 40px;\n    display: flex;\n    justify-content: space-around;\n    align-items: center;\n}\n\n.task-form>.form-buttons>button{\n    cursor: pointer;\n    width: 34%;\n    height: 66%;\n    border-radius: 5px;\n    font-size: 14px;\n    background: none;\n    border: none;\n    background-color: var(--blue);\n    color: var(--white);\n}\n\n.task-form>.form-buttons>button:hover{\n    background-color: var(--turquoise);\n    color: var(--black);\n    box-shadow: 0 0 2px var(--black);\n}\n\n.project-form{\n    font-size: 14px;\n    padding: 5px;\n    z-index: 2;\n    position: absolute;\n    top: 0;\n    bottom: 0;\n    right: 0;\n    left: 0;\n    margin: auto;\n    background-color: var(--white);\n    border-radius: 4px;\n    width: 400px;\n    height: 90px;\n    box-shadow: 0 0 5px gray;\n    display: none;\n    flex-direction: column;\n    justify-content: space-between;\n}\n\n.project-form>div{\n    height: 25px;\n    display: flex;\n    align-items: center;\n}\n\n.project-form>input{\n    border: none;\n    background: none;\n    box-shadow: 0 0 2px gray;\n    margin-bottom: 5px;\n}\n\n.project-form>.form-buttons{\n    display: flex;\n    justify-content: space-around;\n    flex-grow: 1;\n    align-items: center;\n}\n\n.project-form>.form-buttons>button{\n    cursor: pointer;\n    width: 34%;\n    height: 66%;\n    border-radius: 5px;\n    font-size: 14px;\n    background: none;\n    border: none;\n    background-color: var(--blue);\n    color: var(--white);\n}\n\n.project-form>.form-buttons>button:hover{\n    background-color: var(--turquoise);\n    color: var(--black);\n    box-shadow: 0 0 2px var(--black);\n}\n\n.content{\n    display: flex;\n    flex-direction: column;\n    min-height: 100vh;\n}\n\n.header{\n    background-color: var(--blue);\n    color: var(--white);\n    display: flex;\n    width: 100%;\n    height: 40px;\n    align-items: center;\n}\n\n#menu{\n    display: none;\n    cursor: pointer;\n    width: 30px;\n    text-align: center;\n    font-size: 32px;\n}\n\n#title{\n    cursor: default;\n    padding-right: 30px;\n    flex-grow: 1;\n    text-align: center;\n    font-size: 32px;\n}\n\n.main{\n    flex-grow: 1;\n    display: flex;\n}\n\n.side-panel{\n    position: relative;\n    width: 250px;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n}\n\n.side-panel::after{\n    content: "";\n    background-color: lightgray;\n    position: absolute;\n    top: 5px;\n    right: 0;\n    bottom: 5px;\n    width: 1px;\n}\n\n.views{\n    width: 100%;\n    position: relative;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n}\n\n.views>div{\n    width: 100%;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    height: 40px;\n    cursor: pointer;\n    color:var(--blue);\n}\n\n.views::after{\n    position: absolute;\n    background-color: lightgray;\n    content: "";\n    bottom: 0;\n    left: 20px;\n    right: 20px;\n    height: 1px;\n}\n\n.projects{\n    width: 100%;\n    flex-grow: 1;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n}\n\n.projects>div{\n    display: flex;\n    align-items: center;\n    height: 40px;\n    cursor: pointer;\n    color:var(--blue);\n}\n\n#new-project-container{\n    display: flex;\n    width: calc(100% - 40px);\n    padding-left: 20px;\n    padding-right: 20px;\n    cursor: default;\n}\n\n#projects-title{\n    flex-grow: 1;\n    cursor: default;\n}\n\n#new-project{\n    cursor: pointer;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    width: 30px;\n    height: 30px;\n    font-size: 20px;\n    border-radius: 50%;\n}\n\n#new-project:hover{\n    background-color: var(--blue);\n    color: var(--white);\n}\n\n.project-container{\n    width: 100%;\n    padding-left: 20px;\n    padding-right: 20px;\n    display: flex;\n    flex-direction: column;\n    flex-grow: 1;\n    justify-content: flex-start;\n}\n\n.single-project{\n    width: calc(100% - 40px);\n    height: 40px;\n    display: flex;\n    align-items: center;\n}\n\n.project-name{\n    flex-grow: 1;\n    height: 100%;\n    display: flex;\n    align-items: center;\n    word-break: break-word;\n}\n\n.edit-project{\n    cursor: pointer;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    width: 24px;\n    height: 100%;\n    border-radius: 50%;\n}\n\n.delete-project{\n    cursor: pointer;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    width: 24px;\n    height: 100%;\n    border-radius: 50%;\n}\n\n.tasks{\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    flex-grow: 1;\n}\n\n.tasks-title{\n    color: var(--blue);\n    font-size: 20px;\n    display: flex;\n    width: 90%;\n    max-width: 800px;\n    justify-content: space-between;\n    align-items: center;\n    height: 40px;\n}\n\n#new-task{\n    cursor: pointer;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    width: 30px;\n    height: 30px;\n    font-size: 20px;\n    border-radius: 50%;\n}\n\n#new-task:hover{\n    background-color: var(--blue);\n    color: var(--white);\n}\n\n.task-container{\n    width: 100%;\n    flex-grow: 1;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n}\n\n.task-card{\n    width: 90%;\n    min-width: 300px;\n    max-width: 800px;\n    height: 40px;\n    display: flex;\n    align-items: center;\n    border-radius: 5px;\n    box-shadow: 0 0 3px gray;\n    margin-bottom: 10px;\n    padding-left: 3px;\n    padding-right: 3px;\n}\n\n.priority-high{\n    width: 10px;\n    height: 10px;\n    margin-right: 5px;\n    border-radius: 50%;\n    background-color: red;\n    text-align: center;\n}\n\n.priority-medium{\n    width: 10px;\n    height: 10px;\n    margin-right: 5px;\n    border-radius: 50%;\n    background-color: orange;\n    text-align: center;\n}\n\n.priority-low{\n    width: 10px;\n    height: 10px;\n    margin-right: 5px;\n    border-radius: 50%;\n    background-color: green;\n    text-align: center;\n}\n\n.task-title{\n    flex-grow: 1;\n    height: 100%;\n    display: flex;\n    align-items: center;\n    cursor: pointer;\n    word-break: break-word;\n}\n\n.edit-task{\n    cursor: pointer;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    width: 24px;\n    height: 100%;\n    opacity: 60%;\n}\n\n.delete-task{\n    cursor: pointer;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    width: 24px;\n    height: 100%;\n    opacity: 60%;\n}\n\n.footer{\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    height: 20px;\n    background-color: var(--white);\n    color: var(--black)\n}\n\n.footer>p>a{\n    text-decoration: none;\n    color: var(--black);\n}\n\n\n@media screen and (max-width: 420px) {\n    .main{\n        display: block;\n        position: relative;\n    }\n\n    #menu{\n        display: block;\n        text-align: end;\n        padding-right: 5px;\n    }\n\n    .side-panel{\n        display: none;\n        position: absolute;\n        left: 0;\n        z-index: 1;\n        background-color: var(--white);\n        height: 100%;\n    }\n\n    .tasks{\n        height: 100%;\n    }\n\n    .project-form{\n        min-width: 300px;\n        width: 95%;\n    }\n\n    .task-form{\n        min-width: 300px;\n        width: 95%;\n    }\n\n    .task-details{\n        min-width: 300px;\n        width: 95%;\n    }\n    \n}'],sourceRoot:""}]);const s=o},645:n=>{n.exports=function(n){var e=[];return e.toString=function(){return this.map((function(e){var t=n(e);return e[2]?"@media ".concat(e[2]," {").concat(t,"}"):t})).join("")},e.i=function(n,t,r){"string"==typeof n&&(n=[[null,n,""]]);var a={};if(r)for(var i=0;i<this.length;i++){var o=this[i][0];null!=o&&(a[o]=!0)}for(var s=0;s<n.length;s++){var A=[].concat(n[s]);r&&a[A[0]]||(t&&(A[2]?A[2]="".concat(t," and ").concat(A[2]):A[2]=t),e.push(A))}},e}},15:n=>{function e(n,e){(null==e||e>n.length)&&(e=n.length);for(var t=0,r=new Array(e);t<e;t++)r[t]=n[t];return r}n.exports=function(n){var t,r,a=(r=4,function(n){if(Array.isArray(n))return n}(t=n)||function(n,e){var t=null==n?null:"undefined"!=typeof Symbol&&n[Symbol.iterator]||n["@@iterator"];if(null!=t){var r,a,i=[],o=!0,s=!1;try{for(t=t.call(n);!(o=(r=t.next()).done)&&(i.push(r.value),!e||i.length!==e);o=!0);}catch(n){s=!0,a=n}finally{try{o||null==t.return||t.return()}finally{if(s)throw a}}return i}}(t,r)||function(n,t){if(n){if("string"==typeof n)return e(n,t);var r=Object.prototype.toString.call(n).slice(8,-1);return"Object"===r&&n.constructor&&(r=n.constructor.name),"Map"===r||"Set"===r?Array.from(n):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?e(n,t):void 0}}(t,r)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),i=a[1],o=a[3];if(!o)return i;if("function"==typeof btoa){var s=btoa(unescape(encodeURIComponent(JSON.stringify(o)))),A="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(s),l="/*# ".concat(A," */"),d=o.sources.map((function(n){return"/*# sourceURL=".concat(o.sourceRoot||"").concat(n," */")}));return[i].concat(d).concat([l]).join("\n")}return[i].join("\n")}},379:n=>{var e=[];function t(n){for(var t=-1,r=0;r<e.length;r++)if(e[r].identifier===n){t=r;break}return t}function r(n,r){for(var i={},o=[],s=0;s<n.length;s++){var A=n[s],l=r.base?A[0]+r.base:A[0],d=i[l]||0,c="".concat(l," ").concat(d);i[l]=d+1;var u=t(c),h={css:A[1],media:A[2],sourceMap:A[3]};-1!==u?(e[u].references++,e[u].updater(h)):e.push({identifier:c,updater:a(h,r),references:1}),o.push(c)}return o}function a(n,e){var t=e.domAPI(e);return t.update(n),function(e){if(e){if(e.css===n.css&&e.media===n.media&&e.sourceMap===n.sourceMap)return;t.update(n=e)}else t.remove()}}n.exports=function(n,a){var i=r(n=n||[],a=a||{});return function(n){n=n||[];for(var o=0;o<i.length;o++){var s=t(i[o]);e[s].references--}for(var A=r(n,a),l=0;l<i.length;l++){var d=t(i[l]);0===e[d].references&&(e[d].updater(),e.splice(d,1))}i=A}}},569:n=>{var e={};n.exports=function(n,t){var r=function(n){if(void 0===e[n]){var t=document.querySelector(n);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(n){t=null}e[n]=t}return e[n]}(n);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(t)}},216:n=>{n.exports=function(n){var e=document.createElement("style");return n.setAttributes(e,n.attributes),n.insert(e),e}},565:(n,e,t)=>{n.exports=function(n){var e=t.nc;e&&n.setAttribute("nonce",e)}},795:n=>{n.exports=function(n){var e=n.insertStyleElement(n);return{update:function(t){!function(n,e,t){var r=t.css,a=t.media,i=t.sourceMap;a?n.setAttribute("media",a):n.removeAttribute("media"),i&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),e.styleTagTransform(r,n)}(e,n,t)},remove:function(){!function(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n)}(e)}}}},589:n=>{n.exports=function(n,e){if(e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}}},e={};function t(r){var a=e[r];if(void 0!==a)return a.exports;var i=e[r]={id:r,exports:{}};return n[r](i,i.exports,t),i.exports}t.n=n=>{var e=n&&n.__esModule?()=>n.default:()=>n;return t.d(e,{a:e}),e},t.d=(n,e)=>{for(var r in e)t.o(e,r)&&!t.o(n,r)&&Object.defineProperty(n,r,{enumerable:!0,get:e[r]})},t.o=(n,e)=>Object.prototype.hasOwnProperty.call(n,e),(()=>{let n=[{title:"This is a task",description:"This is a description",project:"Getting started",date:"2021-09-24",priority:"high",id:"0000001"},{title:"High priority is marked with a red circle",description:"This is a description",project:"Getting started",date:"2021-09-24",priority:"high",id:"0000002"},{title:"Medium priority is marked with a yellow circle",description:"This is a description",project:"Getting started",date:"2021-09-24",priority:"medium",id:"0000003"},{title:"Low priority is marked with a green circle",description:"This is a description",project:"Getting started",date:"2021-09-24",priority:"low",id:"0000004"}];localStorage.tasks&&(n=JSON.parse(localStorage.tasks));const e=e=>{n=e,localStorage.tasks=JSON.stringify(n)},r=()=>n;function a(n,e){if(e.length<n)throw new TypeError(n+" argument"+(n>1?"s":"")+" required, but only "+e.length+" present")}function i(n){a(1,arguments);var e=Object.prototype.toString.call(n);return n instanceof Date||"object"==typeof n&&"[object Date]"===e?new Date(n.getTime()):"number"==typeof n||"[object Number]"===e?new Date(n):("string"!=typeof n&&"[object String]"!==e||"undefined"==typeof console||(console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://git.io/fjule"),console.warn((new Error).stack)),new Date(NaN))}function o(n){a(1,arguments);var e=i(n);return e.setHours(0,0,0,0),e}function s(n,e){a(2,arguments);var t=o(n),r=o(e);return t.getTime()===r.getTime()}function A(n){if(null===n||!0===n||!1===n)return NaN;var e=Number(n);return isNaN(e)?e:e<0?Math.ceil(e):Math.floor(e)}var l=36e5,d={dateTimeDelimiter:/[T ]/,timeZoneDelimiter:/[Z ]/i,timezone:/([Z+-].*)$/},c=/^-?(?:(\d{3})|(\d{2})(?:-?(\d{2}))?|W(\d{2})(?:-?(\d{1}))?|)$/,u=/^(\d{2}(?:[.,]\d*)?)(?::?(\d{2}(?:[.,]\d*)?))?(?::?(\d{2}(?:[.,]\d*)?))?$/,h=/^([+-])(\d{2})(?::?(\d{2}))?$/;function m(n,e){a(1,arguments);var t=e||{},r=null==t.additionalDigits?2:A(t.additionalDigits);if(2!==r&&1!==r&&0!==r)throw new RangeError("additionalDigits must be 0, 1 or 2");if("string"!=typeof n&&"[object String]"!==Object.prototype.toString.call(n))return new Date(NaN);var i,o=p(n);if(o.date){var s=f(o.date,r);i=g(s.restDateString,s.year)}if(isNaN(i)||!i)return new Date(NaN);var l,d=i.getTime(),c=0;if(o.time&&(c=B(o.time),isNaN(c)||null===c))return new Date(NaN);if(!o.timezone){var u=new Date(d+c),h=new Date(0);return h.setFullYear(u.getUTCFullYear(),u.getUTCMonth(),u.getUTCDate()),h.setHours(u.getUTCHours(),u.getUTCMinutes(),u.getUTCSeconds(),u.getUTCMilliseconds()),h}return l=w(o.timezone),isNaN(l)?new Date(NaN):new Date(d+c+l)}function p(n){var e,t={},r=n.split(d.dateTimeDelimiter);if(r.length>2)return t;if(/:/.test(r[0])?(t.date=null,e=r[0]):(t.date=r[0],e=r[1],d.timeZoneDelimiter.test(t.date)&&(t.date=n.split(d.timeZoneDelimiter)[0],e=n.substr(t.date.length,n.length))),e){var a=d.timezone.exec(e);a?(t.time=e.replace(a[1],""),t.timezone=a[1]):t.time=e}return t}function f(n,e){var t=new RegExp("^(?:(\\d{4}|[+-]\\d{"+(4+e)+"})|(\\d{2}|[+-]\\d{"+(2+e)+"})$)"),r=n.match(t);if(!r)return{year:null};var a=r[1]&&parseInt(r[1]),i=r[2]&&parseInt(r[2]);return{year:null==i?a:100*i,restDateString:n.slice((r[1]||r[2]).length)}}function g(n,e){if(null===e)return null;var t=n.match(c);if(!t)return null;var r=!!t[4],a=C(t[1]),i=C(t[2])-1,o=C(t[3]),s=C(t[4]),A=C(t[5])-1;if(r)return function(n,e,t){return e>=1&&e<=53&&t>=0&&t<=6}(0,s,A)?function(n,e,t){var r=new Date(0);r.setUTCFullYear(n,0,4);var a=7*(e-1)+t+1-(r.getUTCDay()||7);return r.setUTCDate(r.getUTCDate()+a),r}(e,s,A):new Date(NaN);var l=new Date(0);return function(n,e,t){return e>=0&&e<=11&&t>=1&&t<=(x[e]||(I(n)?29:28))}(e,i,o)&&function(n,e){return e>=1&&e<=(I(n)?366:365)}(e,a)?(l.setUTCFullYear(e,i,Math.max(a,o)),l):new Date(NaN)}function C(n){return n?parseInt(n):1}function B(n){var e=n.match(u);if(!e)return null;var t=b(e[1]),r=b(e[2]),a=b(e[3]);return function(n,e,t){return 24===n?0===e&&0===t:t>=0&&t<60&&e>=0&&e<60&&n>=0&&n<25}(t,r,a)?t*l+6e4*r+1e3*a:NaN}function b(n){return n&&parseFloat(n.replace(",","."))||0}function w(n){if("Z"===n)return 0;var e=n.match(h);if(!e)return 0;var t="+"===e[1]?-1:1,r=parseInt(e[2]),a=e[3]&&parseInt(e[3])||0;return function(n,e){return e>=0&&e<=59}(0,a)?t*(r*l+6e4*a):NaN}var x=[31,null,31,30,31,30,31,31,30,31,30,31];function I(n){return n%400==0||n%4==0&&n%100}function y(n,e){a(1,arguments);var t=e||{},r=t.locale,o=r&&r.options&&r.options.weekStartsOn,s=null==o?0:A(o),l=null==t.weekStartsOn?s:A(t.weekStartsOn);if(!(l>=0&&l<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");var d=i(n),c=d.getDay(),u=(c<l?7:0)+c-l;return d.setDate(d.getDate()-u),d.setHours(0,0,0,0),d}function k(n,e,t){a(2,arguments);var r=y(n,t),i=y(e,t);return r.getTime()===i.getTime()}function v(n,e){a(2,arguments);var t=i(n),r=i(e),o=t.getTime()-r.getTime();return o<0?-1:o>0?1:o}function T(n){a(1,arguments);var e=i(n);return!isNaN(e)}var E={lessThanXSeconds:{one:"less than a second",other:"less than {{count}} seconds"},xSeconds:{one:"1 second",other:"{{count}} seconds"},halfAMinute:"half a minute",lessThanXMinutes:{one:"less than a minute",other:"less than {{count}} minutes"},xMinutes:{one:"1 minute",other:"{{count}} minutes"},aboutXHours:{one:"about 1 hour",other:"about {{count}} hours"},xHours:{one:"1 hour",other:"{{count}} hours"},xDays:{one:"1 day",other:"{{count}} days"},aboutXWeeks:{one:"about 1 week",other:"about {{count}} weeks"},xWeeks:{one:"1 week",other:"{{count}} weeks"},aboutXMonths:{one:"about 1 month",other:"about {{count}} months"},xMonths:{one:"1 month",other:"{{count}} months"},aboutXYears:{one:"about 1 year",other:"about {{count}} years"},xYears:{one:"1 year",other:"{{count}} years"},overXYears:{one:"over 1 year",other:"over {{count}} years"},almostXYears:{one:"almost 1 year",other:"almost {{count}} years"}};function Y(n){return function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=e.width?String(e.width):n.defaultWidth,r=n.formats[t]||n.formats[n.defaultWidth];return r}}const j={date:Y({formats:{full:"EEEE, MMMM do, y",long:"MMMM do, y",medium:"MMM d, y",short:"MM/dd/yyyy"},defaultWidth:"full"}),time:Y({formats:{full:"h:mm:ss a zzzz",long:"h:mm:ss a z",medium:"h:mm:ss a",short:"h:mm a"},defaultWidth:"full"}),dateTime:Y({formats:{full:"{{date}} 'at' {{time}}",long:"{{date}} 'at' {{time}}",medium:"{{date}}, {{time}}",short:"{{date}}, {{time}}"},defaultWidth:"full"})};var S={lastWeek:"'last' eeee 'at' p",yesterday:"'yesterday at' p",today:"'today at' p",tomorrow:"'tomorrow at' p",nextWeek:"eeee 'at' p",other:"P"};function D(n){return function(e,t){var r,a=t||{};if("formatting"===(a.context?String(a.context):"standalone")&&n.formattingValues){var i=n.defaultFormattingWidth||n.defaultWidth,o=a.width?String(a.width):i;r=n.formattingValues[o]||n.formattingValues[i]}else{var s=n.defaultWidth,A=a.width?String(a.width):n.defaultWidth;r=n.values[A]||n.values[s]}return r[n.argumentCallback?n.argumentCallback(e):e]}}const M={ordinalNumber:function(n,e){var t=Number(n),r=t%100;if(r>20||r<10)switch(r%10){case 1:return t+"st";case 2:return t+"nd";case 3:return t+"rd"}return t+"th"},era:D({values:{narrow:["B","A"],abbreviated:["BC","AD"],wide:["Before Christ","Anno Domini"]},defaultWidth:"wide"}),quarter:D({values:{narrow:["1","2","3","4"],abbreviated:["Q1","Q2","Q3","Q4"],wide:["1st quarter","2nd quarter","3rd quarter","4th quarter"]},defaultWidth:"wide",argumentCallback:function(n){return Number(n)-1}}),month:D({values:{narrow:["J","F","M","A","M","J","J","A","S","O","N","D"],abbreviated:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],wide:["January","February","March","April","May","June","July","August","September","October","November","December"]},defaultWidth:"wide"}),day:D({values:{narrow:["S","M","T","W","T","F","S"],short:["Su","Mo","Tu","We","Th","Fr","Sa"],abbreviated:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],wide:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]},defaultWidth:"wide"}),dayPeriod:D({values:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"}},defaultWidth:"wide",formattingValues:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"}},defaultFormattingWidth:"wide"})};function P(n){return function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},r=t.width,a=r&&n.matchPatterns[r]||n.matchPatterns[n.defaultMatchWidth],i=e.match(a);if(!i)return null;var o,s=i[0],A=r&&n.parsePatterns[r]||n.parsePatterns[n.defaultParseWidth],l=Array.isArray(A)?U(A,(function(n){return n.test(s)})):W(A,(function(n){return n.test(s)}));o=n.valueCallback?n.valueCallback(l):l,o=t.valueCallback?t.valueCallback(o):o;var d=e.slice(s.length);return{value:o,rest:d}}}function W(n,e){for(var t in n)if(n.hasOwnProperty(t)&&e(n[t]))return t}function U(n,e){for(var t=0;t<n.length;t++)if(e(n[t]))return t}var N,O={ordinalNumber:(N={matchPattern:/^(\d+)(th|st|nd|rd)?/i,parsePattern:/\d+/i,valueCallback:function(n){return parseInt(n,10)}},function(n){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},t=n.match(N.matchPattern);if(!t)return null;var r=t[0],a=n.match(N.parsePattern);if(!a)return null;var i=N.valueCallback?N.valueCallback(a[0]):a[0];i=e.valueCallback?e.valueCallback(i):i;var o=n.slice(r.length);return{value:i,rest:o}}),era:P({matchPatterns:{narrow:/^(b|a)/i,abbreviated:/^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,wide:/^(before christ|before common era|anno domini|common era)/i},defaultMatchWidth:"wide",parsePatterns:{any:[/^b/i,/^(a|c)/i]},defaultParseWidth:"any"}),quarter:P({matchPatterns:{narrow:/^[1234]/i,abbreviated:/^q[1234]/i,wide:/^[1234](th|st|nd|rd)? quarter/i},defaultMatchWidth:"wide",parsePatterns:{any:[/1/i,/2/i,/3/i,/4/i]},defaultParseWidth:"any",valueCallback:function(n){return n+1}}),month:P({matchPatterns:{narrow:/^[jfmasond]/i,abbreviated:/^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,wide:/^(january|february|march|april|may|june|july|august|september|october|november|december)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^j/i,/^f/i,/^m/i,/^a/i,/^m/i,/^j/i,/^j/i,/^a/i,/^s/i,/^o/i,/^n/i,/^d/i],any:[/^ja/i,/^f/i,/^mar/i,/^ap/i,/^may/i,/^jun/i,/^jul/i,/^au/i,/^s/i,/^o/i,/^n/i,/^d/i]},defaultParseWidth:"any"}),day:P({matchPatterns:{narrow:/^[smtwf]/i,short:/^(su|mo|tu|we|th|fr|sa)/i,abbreviated:/^(sun|mon|tue|wed|thu|fri|sat)/i,wide:/^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^s/i,/^m/i,/^t/i,/^w/i,/^t/i,/^f/i,/^s/i],any:[/^su/i,/^m/i,/^tu/i,/^w/i,/^th/i,/^f/i,/^sa/i]},defaultParseWidth:"any"}),dayPeriod:P({matchPatterns:{narrow:/^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,any:/^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i},defaultMatchWidth:"any",parsePatterns:{any:{am:/^a/i,pm:/^p/i,midnight:/^mi/i,noon:/^no/i,morning:/morning/i,afternoon:/afternoon/i,evening:/evening/i,night:/night/i}},defaultParseWidth:"any"})},Z={code:"en-US",formatDistance:function(n,e,t){var r;return t=t||{},r="string"==typeof E[n]?E[n]:1===e?E[n].one:E[n].other.replace("{{count}}",e),t.addSuffix?t.comparison>0?"in "+r:r+" ago":r},formatLong:j,formatRelative:function(n,e,t,r){return S[n]},localize:M,match:O,options:{weekStartsOn:0,firstWeekContainsDate:1}};const z=Z;function q(n,e){a(2,arguments);var t=i(n).getTime(),r=A(e);return new Date(t+r)}function L(n,e){a(2,arguments);var t=A(e);return q(n,-t)}function Q(n,e){for(var t=n<0?"-":"",r=Math.abs(n).toString();r.length<e;)r="0"+r;return t+r}const X=function(n,e){var t=n.getUTCFullYear(),r=t>0?t:1-t;return Q("yy"===e?r%100:r,e.length)},F=function(n,e){var t=n.getUTCMonth();return"M"===e?String(t+1):Q(t+1,2)},H=function(n,e){return Q(n.getUTCDate(),e.length)},R=function(n,e){return Q(n.getUTCHours()%12||12,e.length)},J=function(n,e){return Q(n.getUTCHours(),e.length)},G=function(n,e){return Q(n.getUTCMinutes(),e.length)},V=function(n,e){return Q(n.getUTCSeconds(),e.length)},$=function(n,e){var t=e.length,r=n.getUTCMilliseconds();return Q(Math.floor(r*Math.pow(10,t-3)),e.length)};var _=864e5;function K(n){a(1,arguments);var e=1,t=i(n),r=t.getUTCDay(),o=(r<e?7:0)+r-e;return t.setUTCDate(t.getUTCDate()-o),t.setUTCHours(0,0,0,0),t}function nn(n){a(1,arguments);var e=i(n),t=e.getUTCFullYear(),r=new Date(0);r.setUTCFullYear(t+1,0,4),r.setUTCHours(0,0,0,0);var o=K(r),s=new Date(0);s.setUTCFullYear(t,0,4),s.setUTCHours(0,0,0,0);var A=K(s);return e.getTime()>=o.getTime()?t+1:e.getTime()>=A.getTime()?t:t-1}function en(n){a(1,arguments);var e=nn(n),t=new Date(0);t.setUTCFullYear(e,0,4),t.setUTCHours(0,0,0,0);var r=K(t);return r}var tn=6048e5;function rn(n,e){a(1,arguments);var t=e||{},r=t.locale,o=r&&r.options&&r.options.weekStartsOn,s=null==o?0:A(o),l=null==t.weekStartsOn?s:A(t.weekStartsOn);if(!(l>=0&&l<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");var d=i(n),c=d.getUTCDay(),u=(c<l?7:0)+c-l;return d.setUTCDate(d.getUTCDate()-u),d.setUTCHours(0,0,0,0),d}function an(n,e){a(1,arguments);var t=i(n,e),r=t.getUTCFullYear(),o=e||{},s=o.locale,l=s&&s.options&&s.options.firstWeekContainsDate,d=null==l?1:A(l),c=null==o.firstWeekContainsDate?d:A(o.firstWeekContainsDate);if(!(c>=1&&c<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var u=new Date(0);u.setUTCFullYear(r+1,0,c),u.setUTCHours(0,0,0,0);var h=rn(u,e),m=new Date(0);m.setUTCFullYear(r,0,c),m.setUTCHours(0,0,0,0);var p=rn(m,e);return t.getTime()>=h.getTime()?r+1:t.getTime()>=p.getTime()?r:r-1}function on(n,e){a(1,arguments);var t=e||{},r=t.locale,i=r&&r.options&&r.options.firstWeekContainsDate,o=null==i?1:A(i),s=null==t.firstWeekContainsDate?o:A(t.firstWeekContainsDate),l=an(n,e),d=new Date(0);d.setUTCFullYear(l,0,s),d.setUTCHours(0,0,0,0);var c=rn(d,e);return c}var sn=6048e5,An={G:function(n,e,t){var r=n.getUTCFullYear()>0?1:0;switch(e){case"G":case"GG":case"GGG":return t.era(r,{width:"abbreviated"});case"GGGGG":return t.era(r,{width:"narrow"});default:return t.era(r,{width:"wide"})}},y:function(n,e,t){if("yo"===e){var r=n.getUTCFullYear(),a=r>0?r:1-r;return t.ordinalNumber(a,{unit:"year"})}return X(n,e)},Y:function(n,e,t,r){var a=an(n,r),i=a>0?a:1-a;return"YY"===e?Q(i%100,2):"Yo"===e?t.ordinalNumber(i,{unit:"year"}):Q(i,e.length)},R:function(n,e){return Q(nn(n),e.length)},u:function(n,e){return Q(n.getUTCFullYear(),e.length)},Q:function(n,e,t){var r=Math.ceil((n.getUTCMonth()+1)/3);switch(e){case"Q":return String(r);case"QQ":return Q(r,2);case"Qo":return t.ordinalNumber(r,{unit:"quarter"});case"QQQ":return t.quarter(r,{width:"abbreviated",context:"formatting"});case"QQQQQ":return t.quarter(r,{width:"narrow",context:"formatting"});default:return t.quarter(r,{width:"wide",context:"formatting"})}},q:function(n,e,t){var r=Math.ceil((n.getUTCMonth()+1)/3);switch(e){case"q":return String(r);case"qq":return Q(r,2);case"qo":return t.ordinalNumber(r,{unit:"quarter"});case"qqq":return t.quarter(r,{width:"abbreviated",context:"standalone"});case"qqqqq":return t.quarter(r,{width:"narrow",context:"standalone"});default:return t.quarter(r,{width:"wide",context:"standalone"})}},M:function(n,e,t){var r=n.getUTCMonth();switch(e){case"M":case"MM":return F(n,e);case"Mo":return t.ordinalNumber(r+1,{unit:"month"});case"MMM":return t.month(r,{width:"abbreviated",context:"formatting"});case"MMMMM":return t.month(r,{width:"narrow",context:"formatting"});default:return t.month(r,{width:"wide",context:"formatting"})}},L:function(n,e,t){var r=n.getUTCMonth();switch(e){case"L":return String(r+1);case"LL":return Q(r+1,2);case"Lo":return t.ordinalNumber(r+1,{unit:"month"});case"LLL":return t.month(r,{width:"abbreviated",context:"standalone"});case"LLLLL":return t.month(r,{width:"narrow",context:"standalone"});default:return t.month(r,{width:"wide",context:"standalone"})}},w:function(n,e,t,r){var o=function(n,e){a(1,arguments);var t=i(n),r=rn(t,e).getTime()-on(t,e).getTime();return Math.round(r/sn)+1}(n,r);return"wo"===e?t.ordinalNumber(o,{unit:"week"}):Q(o,e.length)},I:function(n,e,t){var r=function(n){a(1,arguments);var e=i(n),t=K(e).getTime()-en(e).getTime();return Math.round(t/tn)+1}(n);return"Io"===e?t.ordinalNumber(r,{unit:"week"}):Q(r,e.length)},d:function(n,e,t){return"do"===e?t.ordinalNumber(n.getUTCDate(),{unit:"date"}):H(n,e)},D:function(n,e,t){var r=function(n){a(1,arguments);var e=i(n),t=e.getTime();e.setUTCMonth(0,1),e.setUTCHours(0,0,0,0);var r=e.getTime(),o=t-r;return Math.floor(o/_)+1}(n);return"Do"===e?t.ordinalNumber(r,{unit:"dayOfYear"}):Q(r,e.length)},E:function(n,e,t){var r=n.getUTCDay();switch(e){case"E":case"EE":case"EEE":return t.day(r,{width:"abbreviated",context:"formatting"});case"EEEEE":return t.day(r,{width:"narrow",context:"formatting"});case"EEEEEE":return t.day(r,{width:"short",context:"formatting"});default:return t.day(r,{width:"wide",context:"formatting"})}},e:function(n,e,t,r){var a=n.getUTCDay(),i=(a-r.weekStartsOn+8)%7||7;switch(e){case"e":return String(i);case"ee":return Q(i,2);case"eo":return t.ordinalNumber(i,{unit:"day"});case"eee":return t.day(a,{width:"abbreviated",context:"formatting"});case"eeeee":return t.day(a,{width:"narrow",context:"formatting"});case"eeeeee":return t.day(a,{width:"short",context:"formatting"});default:return t.day(a,{width:"wide",context:"formatting"})}},c:function(n,e,t,r){var a=n.getUTCDay(),i=(a-r.weekStartsOn+8)%7||7;switch(e){case"c":return String(i);case"cc":return Q(i,e.length);case"co":return t.ordinalNumber(i,{unit:"day"});case"ccc":return t.day(a,{width:"abbreviated",context:"standalone"});case"ccccc":return t.day(a,{width:"narrow",context:"standalone"});case"cccccc":return t.day(a,{width:"short",context:"standalone"});default:return t.day(a,{width:"wide",context:"standalone"})}},i:function(n,e,t){var r=n.getUTCDay(),a=0===r?7:r;switch(e){case"i":return String(a);case"ii":return Q(a,e.length);case"io":return t.ordinalNumber(a,{unit:"day"});case"iii":return t.day(r,{width:"abbreviated",context:"formatting"});case"iiiii":return t.day(r,{width:"narrow",context:"formatting"});case"iiiiii":return t.day(r,{width:"short",context:"formatting"});default:return t.day(r,{width:"wide",context:"formatting"})}},a:function(n,e,t){var r=n.getUTCHours()/12>=1?"pm":"am";switch(e){case"a":case"aa":return t.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"aaa":return t.dayPeriod(r,{width:"abbreviated",context:"formatting"}).toLowerCase();case"aaaaa":return t.dayPeriod(r,{width:"narrow",context:"formatting"});default:return t.dayPeriod(r,{width:"wide",context:"formatting"})}},b:function(n,e,t){var r,a=n.getUTCHours();switch(r=12===a?"noon":0===a?"midnight":a/12>=1?"pm":"am",e){case"b":case"bb":return t.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"bbb":return t.dayPeriod(r,{width:"abbreviated",context:"formatting"}).toLowerCase();case"bbbbb":return t.dayPeriod(r,{width:"narrow",context:"formatting"});default:return t.dayPeriod(r,{width:"wide",context:"formatting"})}},B:function(n,e,t){var r,a=n.getUTCHours();switch(r=a>=17?"evening":a>=12?"afternoon":a>=4?"morning":"night",e){case"B":case"BB":case"BBB":return t.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"BBBBB":return t.dayPeriod(r,{width:"narrow",context:"formatting"});default:return t.dayPeriod(r,{width:"wide",context:"formatting"})}},h:function(n,e,t){if("ho"===e){var r=n.getUTCHours()%12;return 0===r&&(r=12),t.ordinalNumber(r,{unit:"hour"})}return R(n,e)},H:function(n,e,t){return"Ho"===e?t.ordinalNumber(n.getUTCHours(),{unit:"hour"}):J(n,e)},K:function(n,e,t){var r=n.getUTCHours()%12;return"Ko"===e?t.ordinalNumber(r,{unit:"hour"}):Q(r,e.length)},k:function(n,e,t){var r=n.getUTCHours();return 0===r&&(r=24),"ko"===e?t.ordinalNumber(r,{unit:"hour"}):Q(r,e.length)},m:function(n,e,t){return"mo"===e?t.ordinalNumber(n.getUTCMinutes(),{unit:"minute"}):G(n,e)},s:function(n,e,t){return"so"===e?t.ordinalNumber(n.getUTCSeconds(),{unit:"second"}):V(n,e)},S:function(n,e){return $(n,e)},X:function(n,e,t,r){var a=(r._originalDate||n).getTimezoneOffset();if(0===a)return"Z";switch(e){case"X":return dn(a);case"XXXX":case"XX":return cn(a);default:return cn(a,":")}},x:function(n,e,t,r){var a=(r._originalDate||n).getTimezoneOffset();switch(e){case"x":return dn(a);case"xxxx":case"xx":return cn(a);default:return cn(a,":")}},O:function(n,e,t,r){var a=(r._originalDate||n).getTimezoneOffset();switch(e){case"O":case"OO":case"OOO":return"GMT"+ln(a,":");default:return"GMT"+cn(a,":")}},z:function(n,e,t,r){var a=(r._originalDate||n).getTimezoneOffset();switch(e){case"z":case"zz":case"zzz":return"GMT"+ln(a,":");default:return"GMT"+cn(a,":")}},t:function(n,e,t,r){var a=r._originalDate||n;return Q(Math.floor(a.getTime()/1e3),e.length)},T:function(n,e,t,r){return Q((r._originalDate||n).getTime(),e.length)}};function ln(n,e){var t=n>0?"-":"+",r=Math.abs(n),a=Math.floor(r/60),i=r%60;if(0===i)return t+String(a);var o=e||"";return t+String(a)+o+Q(i,2)}function dn(n,e){return n%60==0?(n>0?"-":"+")+Q(Math.abs(n)/60,2):cn(n,e)}function cn(n,e){var t=e||"",r=n>0?"-":"+",a=Math.abs(n);return r+Q(Math.floor(a/60),2)+t+Q(a%60,2)}const un=An;function hn(n,e){switch(n){case"P":return e.date({width:"short"});case"PP":return e.date({width:"medium"});case"PPP":return e.date({width:"long"});default:return e.date({width:"full"})}}function mn(n,e){switch(n){case"p":return e.time({width:"short"});case"pp":return e.time({width:"medium"});case"ppp":return e.time({width:"long"});default:return e.time({width:"full"})}}const pn={p:mn,P:function(n,e){var t,r=n.match(/(P+)(p+)?/),a=r[1],i=r[2];if(!i)return hn(n,e);switch(a){case"P":t=e.dateTime({width:"short"});break;case"PP":t=e.dateTime({width:"medium"});break;case"PPP":t=e.dateTime({width:"long"});break;default:t=e.dateTime({width:"full"})}return t.replace("{{date}}",hn(a,e)).replace("{{time}}",mn(i,e))}};function fn(n){var e=new Date(Date.UTC(n.getFullYear(),n.getMonth(),n.getDate(),n.getHours(),n.getMinutes(),n.getSeconds(),n.getMilliseconds()));return e.setUTCFullYear(n.getFullYear()),n.getTime()-e.getTime()}var gn=["D","DD"],Cn=["YY","YYYY"];function Bn(n){return-1!==gn.indexOf(n)}function bn(n){return-1!==Cn.indexOf(n)}function wn(n,e,t){if("YYYY"===n)throw new RangeError("Use `yyyy` instead of `YYYY` (in `".concat(e,"`) for formatting years to the input `").concat(t,"`; see: https://git.io/fxCyr"));if("YY"===n)throw new RangeError("Use `yy` instead of `YY` (in `".concat(e,"`) for formatting years to the input `").concat(t,"`; see: https://git.io/fxCyr"));if("D"===n)throw new RangeError("Use `d` instead of `D` (in `".concat(e,"`) for formatting days of the month to the input `").concat(t,"`; see: https://git.io/fxCyr"));if("DD"===n)throw new RangeError("Use `dd` instead of `DD` (in `".concat(e,"`) for formatting days of the month to the input `").concat(t,"`; see: https://git.io/fxCyr"))}var xn=/[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g,In=/P+p+|P+|p+|''|'(''|[^'])+('|$)|./g,yn=/^'([^]*?)'?$/,kn=/''/g,vn=/[a-zA-Z]/;function Tn(n){return n.match(yn)[1].replace(kn,"'")}const En=n=>{let e=n.map((n=>n)),t=[],r=[];return e.forEach((n=>{r.push(m(n.date))})),r=r.sort(v),r.forEach((n=>{const r=e.findIndex((e=>e.date===function(n,e,t){a(2,arguments);var r=String(e),o=t||{},s=o.locale||z,l=s.options&&s.options.firstWeekContainsDate,d=null==l?1:A(l),c=null==o.firstWeekContainsDate?d:A(o.firstWeekContainsDate);if(!(c>=1&&c<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var u=s.options&&s.options.weekStartsOn,h=null==u?0:A(u),m=null==o.weekStartsOn?h:A(o.weekStartsOn);if(!(m>=0&&m<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");if(!s.localize)throw new RangeError("locale must contain localize property");if(!s.formatLong)throw new RangeError("locale must contain formatLong property");var p=i(n);if(!T(p))throw new RangeError("Invalid time value");var f=fn(p),g=L(p,f),C={firstWeekContainsDate:c,weekStartsOn:m,locale:s,_originalDate:p};return r.match(In).map((function(n){var e=n[0];return"p"===e||"P"===e?(0,pn[e])(n,s.formatLong,C):n})).join("").match(xn).map((function(t){if("''"===t)return"'";var r=t[0];if("'"===r)return Tn(t);var a=un[r];if(a)return!o.useAdditionalWeekYearTokens&&bn(t)&&wn(t,e,n),!o.useAdditionalDayOfYearTokens&&Bn(t)&&wn(t,e,n),a(g,t,s.localize,C);if(r.match(vn))throw new RangeError("Format string contains an unescaped latin alphabet character `"+r+"`");return t})).join("")}(n,"yyyy-MM-dd")));t.push(e[r]),e.splice(r,1)})),t};let Yn=[{name:"Getting started",id:"0000001"}];localStorage.projects&&(Yn=JSON.parse(localStorage.projects));const jn=()=>Yn,Sn=()=>{"none"===qn.sidePanel.style.display||""===qn.sidePanel.style.display?qn.sidePanel.style.display="block":qn.sidePanel.style.display="none"},Dn=n=>{window.innerWidth<=420&&"block"===qn.sidePanel.style.display&&Sn();const e=document.querySelector(".task-form");if("none"===e.style.display||""===e.style.display){if(""!=n){let e=r(),t=e.findIndex((e=>e.id===n));t>=0&&(qn.taskTitle.value=e[t].title,qn.taskDescription.value=e[t].description,qn.taskPriority.value=e[t].priority,qn.taskDate.value=e[t].date,qn.taskProject.value=e[t].project,qn.saveTask.setAttribute("id",e[t].id))}else qn.taskTitle.value="",qn.taskDescription.value="",qn.taskPriority.value="medium",qn.taskDate.value=(new Date).toISOString().slice(0,10),qn.taskProject.value="",qn.saveTask.setAttribute("id","");e.style.display="flex",qn.formOverlay.style.display="block"}else e.style.display="none",qn.formOverlay.style.display="none"},Mn=e=>{(e=>{let t=n.findIndex((n=>n.id===e));n.splice(t,1),localStorage.tasks=JSON.stringify(n)})(e),zn()},Pn=n=>{window.innerWidth<=420&&"block"===qn.sidePanel.style.display&&Sn();const e=document.querySelector(".project-form");if("none"===e.style.display||""===e.style.display){if(""!=n){let e=jn(),t=e.findIndex((e=>e.id===n));t>=0&&(qn.projectName.value=e[t].name,qn.saveProject.setAttribute("id",e[t].id))}else qn.projectName.value="",qn.saveProject.setAttribute("id","");e.style.display="flex",qn.formOverlay.style.display="block"}else e.style.display="none",qn.formOverlay.style.display="none"},Wn=n=>{confirm("Are you sure you want to delete this project. This will delete its tasks too.")&&((n=>{let t=Yn.findIndex((e=>e.id===n));if(t>=0){let n=r(),a=[];n.forEach((n=>{n.project!=Yn[t].name&&a.push(n)})),e(a),Yn.splice(t,1),localStorage.projects=JSON.stringify(Yn)}})(n),Ln(jn()),zn())};let Un="All tasks";const Nn=()=>{window.innerWidth<=420&&"block"===qn.sidePanel.style.display&&Sn(),Un="All tasks",qn.domTasksTitle.textContent="All tasks:",Qn(En(r()))},On=()=>{window.innerWidth<=420&&"block"===qn.sidePanel.style.display&&Sn(),Un="Today",qn.domTasksTitle.textContent="Today's tasks:",Qn((()=>{let n=En(r()),e=[];return n.forEach((n=>{(function(n){return a(1,arguments),s(n,Date.now())})(m(n.date))&&e.push(n)})),e})())},Zn=()=>{window.innerWidth<=420&&"block"===qn.sidePanel.style.display&&Sn(),Un="This week",qn.domTasksTitle.textContent="This week's tasks:",Qn((()=>{let n=En(r()),e=[];return n.forEach((n=>{(function(n,e){return a(1,arguments),k(n,Date.now(),e)})(m(n.date))&&e.push(n)})),e})())},zn=()=>{switch(Un){case"All tasks":Nn();break;case"Today":On();break;case"This week":Zn()}},qn={menu:document.getElementById("menu"),newTask:document.getElementById("new-task"),newProject:document.getElementById("new-project"),taskTitle:document.getElementById("task-form-title"),taskDescription:document.getElementById("task-form-description"),taskPriority:document.getElementById("task-form-priority"),taskDate:document.getElementById("task-form-date"),taskProject:document.getElementById("task-form-project"),saveTask:document.querySelector(".task-save-button"),cancelTask:document.querySelector(".task-cancel-button"),projectName:document.getElementById("project-form-name"),saveProject:document.querySelector(".project-save-button"),cancelProject:document.querySelector(".project-cancel-button"),allTasks:document.getElementById("all-tasks"),today:document.getElementById("today"),thisWeek:document.getElementById("this-week"),domTasksTitle:document.getElementById("tasks-dom-title"),taskDetailsTitle:document.querySelector(".task-details-title"),taskDetailsDescription:document.querySelector(".task-details-description"),taskDetailsPriority:document.querySelector(".task-details-priority"),taskDetailsDate:document.querySelector(".task-details-date"),taskDetailsProject:document.querySelector(".task-details-project"),taskDetailsOkButton:document.querySelector(".task-details-ok-button"),formOverlay:document.querySelector(".task-form-overlay"),sidePanel:document.querySelector(".side-panel")};qn.menu.addEventListener("click",(()=>{Sn()})),qn.newTask.addEventListener("click",(()=>{Dn("")})),qn.newProject.addEventListener("click",(()=>{Pn("")})),qn.cancelTask.addEventListener("click",(()=>{Dn("")})),qn.cancelProject.addEventListener("click",(()=>{Pn("")})),qn.allTasks.addEventListener("click",(()=>{Nn()})),qn.today.addEventListener("click",(()=>{On()})),qn.thisWeek.addEventListener("click",(()=>{Zn()})),qn.saveTask.addEventListener("click",(()=>{qn.taskTitle.value.length<1?alert("Please give a title to your task."):qn.taskDate.value?(()=>{const e=qn.saveTask.getAttribute("id");""!=e?((e,t,r,a,i,o)=>{let s=n.findIndex((n=>n.id===e));s>=0&&(n[s].title=t,n[s].description=r,n[s].project=a,n[s].date=i,n[s].priority=o,localStorage.tasks=JSON.stringify(n))})(e,qn.taskTitle.value,qn.taskDescription.value,qn.taskProject.value,qn.taskDate.value,qn.taskPriority.value):((e,t,r,a,i)=>{if(n.length>=1e6)alert("Task limit reached: 1 million tasks");else{let o="",s=!0;for(;s;)o=Math.floor(1e6*Math.random()).toString(),s=!1,n.forEach((n=>{n.id===o&&(s=!0)}));const A=(({title:n,description:e,project:t,date:r,priority:a,id:i})=>({title:n,description:e,project:t,date:r,priority:a,id:i}))({title:e,description:t,project:r,date:a,priority:i,id:o});n.push(A),localStorage.tasks=JSON.stringify(n)}})(qn.taskTitle.value,qn.taskDescription.value,qn.taskProject.value,qn.taskDate.value,qn.taskPriority.value),Dn(""),zn()})():alert("Please pick a due date.")})),qn.saveProject.addEventListener("click",(()=>{if(qn.projectName.value.length<1)return void alert("Please give a name to your project.");let e=!1;jn().forEach((n=>{n.name===qn.projectName.value&&(alert("A project with this name already exists. Please use another name."),e=!0)})),e||(()=>{const e=qn.saveProject.getAttribute("id");""!=e?((e,t)=>{let a=Yn.findIndex((n=>n.id===e));a>=0&&(r().forEach((e=>{e.project===Yn[a].name&&((e,t)=>{let r=n.findIndex((n=>n.id===e));r>=0&&(n[r].project=t,localStorage.tasks=JSON.stringify(n))})(e.id,t)})),Yn[a].name=t,localStorage.projects=JSON.stringify(Yn))})(e,qn.projectName.value):(n=>{if(Yn.length>=1e6)alert("Project limit reached: 1 million projects");else{let e="",t=!0;for(;t;)e=Math.floor(1e6*Math.random()).toString(),t=!1,Yn.forEach((n=>{n.id===e&&(t=!0)}));const r=(({name:n,id:e})=>({name:n,id:e}))({name:n,id:e});Yn.push(r),localStorage.projects=JSON.stringify(Yn)}})(qn.projectName.value),Pn(""),Ln(jn())})()}));const Ln=n=>{const e=document.querySelector(".project-container");e.replaceChildren();const t=document.getElementById("task-form-project");t.replaceChildren();const a=document.createElement("option");a.setAttribute("value",""),a.textContent="",t.appendChild(a),n.forEach((n=>{const a=document.createElement("div");a.classList.add("single-project");const i=document.createElement("div");i.classList.add("project-name"),i.setAttribute("id",n.id),i.textContent=n.name,i.addEventListener("click",(n=>{(n=>{window.innerWidth<=420&&"block"===qn.sidePanel.style.display&&Sn();let e=jn(),t=e.findIndex((e=>e.id===n)),a=e[t].name;qn.domTasksTitle.textContent=`Project: ${a}`,Qn((n=>{let e=En(r()),t=[];return e.forEach((e=>{e.project===n&&t.push(e)})),t})(a))})(n.target.id)}));const o=document.createElement("div");o.classList.add("edit-project"),o.setAttribute("id",n.id);const s=document.createElement("span");s.classList.add("material-icons","md-18"),s.setAttribute("id",n.id),s.textContent="edit_note",o.appendChild(s),o.addEventListener("click",(n=>{Pn(n.target.id)}));const A=document.createElement("div");A.classList.add("delete-project"),A.setAttribute("id",n.id);const l=document.createElement("span");l.classList.add("material-icons","md-18"),l.setAttribute("id",n.id),l.textContent="delete",A.appendChild(l),A.addEventListener("click",(n=>{Wn(n.target.id)})),a.appendChild(i),a.appendChild(o),a.appendChild(A),e.appendChild(a);const d=document.createElement("option");d.setAttribute("value",n.name),d.textContent=n.name,t.appendChild(d)}))},Qn=n=>{const e=document.querySelector(".task-container");e.replaceChildren(),n.forEach((n=>{const t=document.createElement("div");t.classList.add("task-card");const a=document.createElement("div");a.classList.add(`priority-${n.priority}`);const i=document.createElement("div");i.classList.add("task-title"),i.setAttribute("id",n.id),i.textContent=n.title,i.addEventListener("click",(n=>{(n=>{window.innerWidth<=420&&"block"===qn.sidePanel.style.display&&Sn();let e=r(),t=e.findIndex((e=>e.id===n)),a=e[t];qn.taskDetailsTitle.textContent=a.title,qn.taskDetailsDescription.textContent=a.description,qn.taskDetailsPriority.textContent=`Priority: ${a.priority}`,qn.taskDetailsDate.textContent=`Due date: ${a.date}`,qn.taskDetailsProject.textContent=`Project: ${a.project}`,qn.taskDetailsOkButton.addEventListener("click",(()=>{document.querySelector(".task-details").style.display="none"})),document.querySelector(".task-details").style.display="flex"})(n.target.id)}));const o=document.createElement("div");o.classList.add("edit-task"),o.setAttribute("id",n.id);const s=document.createElement("span");s.classList.add("material-icons","md-18"),s.setAttribute("id",n.id),s.textContent="edit_note",o.appendChild(s),o.addEventListener("click",(n=>{Dn(n.target.id)}));const A=document.createElement("div");A.classList.add("delete-task"),A.setAttribute("id",n.id);const l=document.createElement("span");l.classList.add("material-icons","md-18"),l.setAttribute("id",n.id),l.textContent="delete",A.appendChild(l),A.addEventListener("click",(n=>{Mn(n.target.id)})),t.appendChild(a),t.appendChild(i),t.appendChild(o),t.appendChild(A),e.appendChild(t)}))};var Xn=t(379),Fn=t.n(Xn),Hn=t(795),Rn=t.n(Hn),Jn=t(569),Gn=t.n(Jn),Vn=t(565),$n=t.n(Vn),_n=t(216),Kn=t.n(_n),ne=t(589),ee=t.n(ne),te=t(426),re={};re.styleTagTransform=ee(),re.setAttributes=$n(),re.insert=Gn().bind(null,"head"),re.domAPI=Rn(),re.insertStyleElement=Kn(),Fn()(te.Z,re),te.Z&&te.Z.locals&&te.Z.locals,Nn(),Ln(jn())})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,