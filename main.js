(()=>{"use strict";var n={426:(n,e,t)=>{t.d(e,{Z:()=>s});var r=t(15),a=t.n(r),i=t(645),o=t.n(i)()(a());o.push([n.id,':root{\n    --white: #f2f5f7;\n    --blue: #20a4f3; \n    --turquoise: #59f8e8;\n    --crimson: #941c2f;\n    --black: #03191e;\n}\n\nbody{\n    position: relative;\n    margin: 0;\n    font-family: \'Open Sans\', sans-serif;\n    color: var(--black);\n    background-color: var(--white);\n}\n\n.task-details{\n    font-size: 14px;\n    padding: 10px;\n    z-index: 2;\n    position: absolute;\n    top: 0;\n    bottom: 0;\n    right: 0;\n    left: 0;\n    margin: auto;\n    background-color: var(--white);\n    border-radius: 4px;\n    width: 400px;\n    height: 85%;\n    max-height: 400px;\n    box-shadow: 0 0 5px gray;\n    display: none;\n    flex-direction: column;\n}\n\n.task-details-header{\n    font-size: 16px;\n    color: var(--blue);\n    font-weight: bold;\n    margin-bottom: 10px;\n}\n\n.task-details-title{\n    font-size: 16px;\n    margin-bottom: 5px;\n    word-break: break-word;\n}\n\n.task-details-description{\n    flex-grow: 1;\n    word-break: break-word;\n}\n\n.task-details-priority{\n    margin-bottom: 5px;\n}\n\n.task-details-date{\n    margin-bottom: 5px;\n}\n\n.task-details-project{\n    margin-bottom: 5px;\n    word-break: break-word;\n}\n\n.task-details-buttons{\n    display: flex;\n    justify-content: space-around;\n    align-items: center;\n    height: 30px;\n}\n\n.task-details-buttons>button{\n    cursor: pointer;\n    width: 34%;\n    height: 100%;\n    border-radius: 5px;\n    font-size: 16px;\n    background: none;\n    border: none;\n    background-color: var(--blue);\n    color: var(--white);\n}\n\n.task-form-overlay{\n    display: none;\n    position: absolute;\n    width: 100vw;\n    height: 100vh;\n    top: 0;\n    bottom: 0;\n    right: 0;\n    left: 0;\n    margin: auto;\n}\n\n.task-form{\n    font-size: 14px;\n    padding: 5px;\n    z-index: 2;\n    position: absolute;\n    top: 0;\n    bottom: 0;\n    right: 0;\n    left: 0;\n    margin: auto;\n    background-color: var(--white);\n    border-radius: 4px;\n    width: 400px;\n    height: 85%;\n    max-height: 400px;\n    box-shadow: 0 0 5px gray;\n    display: none;\n    flex-direction: column;\n}\n\n.task-form>div{\n    height: 25px;\n}\n\n.task-form>input{\n    border: none;\n    background: none;\n    box-shadow: 0 0 2px gray;\n    margin-bottom: 5px;\n}\n\n.task-form>textarea{\n    border: none;\n    background: none;\n    box-shadow: 0 0 2px gray;\n    margin-bottom: 5px;\n    resize: none;\n    overflow: auto;\n}\n\n.task-form>select{\n    border: none;\n    background: none;\n    box-shadow: 0 0 2px gray;\n    margin-bottom: 5px;\n}\n\n.task-form>.form-buttons{\n    display: flex;\n    justify-content: space-around;\n    flex-grow: 1;\n    align-items: center;\n}\n\n.task-form>.form-buttons>button{\n    cursor: pointer;\n    width: 34%;\n    height: 66%;\n    border-radius: 5px;\n    font-size: 14px;\n    background: none;\n    border: none;\n    background-color: var(--blue);\n    color: var(--white);\n}\n\n.task-form>.form-buttons>button:hover{\n    background-color: var(--turquoise);\n    color: var(--black);\n    box-shadow: 0 0 2px var(--black);\n}\n\n.project-form{\n    font-size: 14px;\n    padding: 5px;\n    z-index: 2;\n    position: absolute;\n    top: 0;\n    bottom: 0;\n    right: 0;\n    left: 0;\n    margin: auto;\n    background-color: var(--white);\n    border-radius: 4px;\n    width: 400px;\n    height: 90px;\n    box-shadow: 0 0 5px gray;\n    display: none;\n    flex-direction: column;\n    justify-content: space-between;\n}\n\n.project-form>div{\n    height: 25px;\n    display: flex;\n    align-items: center;\n}\n\n.project-form>input{\n    border: none;\n    background: none;\n    box-shadow: 0 0 2px gray;\n    margin-bottom: 5px;\n}\n\n.project-form>.form-buttons{\n    display: flex;\n    justify-content: space-around;\n    flex-grow: 1;\n    align-items: center;\n}\n\n.project-form>.form-buttons>button{\n    cursor: pointer;\n    width: 34%;\n    height: 66%;\n    border-radius: 5px;\n    font-size: 14px;\n    background: none;\n    border: none;\n    background-color: var(--blue);\n    color: var(--white);\n}\n\n.project-form>.form-buttons>button:hover{\n    background-color: var(--turquoise);\n    color: var(--black);\n    box-shadow: 0 0 2px var(--black);\n}\n\n.content{\n    display: flex;\n    flex-direction: column;\n    min-height: 100vh;\n}\n\n.header{\n    background-color: var(--blue);\n    color: var(--white);\n    display: flex;\n    width: 100%;\n    height: 40px;\n    align-items: center;\n}\n\n#menu{\n    display: none;\n    cursor: pointer;\n    width: 30px;\n    text-align: center;\n    font-size: 32px;\n}\n\n#title{\n    cursor: default;\n    padding-right: 30px;\n    flex-grow: 1;\n    text-align: center;\n    font-size: 32px;\n}\n\n.main{\n    flex-grow: 1;\n    display: flex;\n}\n\n.side-panel{\n    position: relative;\n    width: 250px;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n}\n\n.side-panel::after{\n    content: "";\n    background-color: lightgray;\n    position: absolute;\n    top: 5px;\n    right: 0;\n    bottom: 5px;\n    width: 1px;\n}\n\n.views{\n    width: 100%;\n    position: relative;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n}\n\n.views>div{\n    width: 100%;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    height: 40px;\n    cursor: pointer;\n    color:var(--blue);\n}\n\n.views::after{\n    position: absolute;\n    background-color: lightgray;\n    content: "";\n    bottom: 0;\n    left: 20px;\n    right: 20px;\n    height: 1px;\n}\n\n.projects{\n    width: 100%;\n    flex-grow: 1;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n}\n\n.projects>div{\n    display: flex;\n    align-items: center;\n    height: 40px;\n    cursor: pointer;\n    color:var(--blue);\n}\n\n#new-project-container{\n    display: flex;\n    width: calc(100% - 40px);\n    padding-left: 20px;\n    padding-right: 20px;\n    cursor: default;\n}\n\n#projects-title{\n    flex-grow: 1;\n    cursor: default;\n}\n\n#new-project{\n    cursor: pointer;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    width: 30px;\n    height: 30px;\n    font-size: 20px;\n    border-radius: 50%;\n}\n\n#new-project:hover{\n    background-color: var(--blue);\n    color: var(--white);\n}\n\n.project-container{\n    width: 100%;\n    padding-left: 20px;\n    padding-right: 20px;\n    display: flex;\n    flex-direction: column;\n    flex-grow: 1;\n    justify-content: flex-start;\n}\n\n.single-project{\n    width: calc(100% - 40px);\n    height: 40px;\n    display: flex;\n    align-items: center;\n}\n\n.project-name{\n    flex-grow: 1;\n    height: 100%;\n    display: flex;\n    align-items: center;\n    word-break: break-word;\n}\n\n.edit-project{\n    cursor: pointer;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    width: 24px;\n    height: 100%;\n    border-radius: 50%;\n}\n\n.delete-project{\n    cursor: pointer;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    width: 24px;\n    height: 100%;\n    border-radius: 50%;\n}\n\n.tasks{\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    flex-grow: 1;\n}\n\n.tasks-title{\n    color: var(--blue);\n    font-size: 20px;\n    display: flex;\n    width: 90%;\n    max-width: 800px;\n    justify-content: space-between;\n    align-items: center;\n    height: 40px;\n}\n\n#new-task{\n    cursor: pointer;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    width: 30px;\n    height: 30px;\n    font-size: 20px;\n    border-radius: 50%;\n}\n\n#new-task:hover{\n    background-color: var(--blue);\n    color: var(--white);\n}\n\n.task-container{\n    width: 100%;\n    flex-grow: 1;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n}\n\n.task-card{\n    width: 90%;\n    min-width: 300px;\n    max-width: 800px;\n    height: 40px;\n    display: flex;\n    align-items: center;\n    border-radius: 5px;\n    box-shadow: 0 0 3px gray;\n    margin-bottom: 10px;\n    padding-left: 3px;\n    padding-right: 3px;\n}\n\n.priority-high{\n    width: 10px;\n    height: 10px;\n    margin-right: 5px;\n    border-radius: 50%;\n    background-color: red;\n    text-align: center;\n}\n\n.priority-medium{\n    width: 10px;\n    height: 10px;\n    margin-right: 5px;\n    border-radius: 50%;\n    background-color: orange;\n    text-align: center;\n}\n\n.priority-low{\n    width: 10px;\n    height: 10px;\n    margin-right: 5px;\n    border-radius: 50%;\n    background-color: green;\n    text-align: center;\n}\n\n.task-title{\n    flex-grow: 1;\n    height: 100%;\n    display: flex;\n    align-items: center;\n    cursor: pointer;\n    word-break: break-word;\n}\n\n.edit-task{\n    cursor: pointer;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    width: 24px;\n    height: 100%;\n    opacity: 60%;\n}\n\n.delete-task{\n    cursor: pointer;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    width: 24px;\n    height: 100%;\n    opacity: 60%;\n}\n\n.footer{\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    height: 20px;\n    background-color: var(--white);\n    color: var(--black)\n}\n\n.footer>p>a{\n    text-decoration: none;\n    color: var(--black);\n}\n\n\n@media screen and (max-width: 420px) {\n    .main{\n        display: block;\n        position: relative;\n    }\n\n    #menu{\n        display: block;\n        text-align: end;\n        padding-right: 5px;\n    }\n\n    .side-panel{\n        display: none;\n        position: absolute;\n        left: 0;\n        z-index: 1;\n        background-color: var(--white);\n        height: 100%;\n    }\n\n    .tasks{\n        height: 100%;\n    }\n\n    .project-form{\n        min-width: 300px;\n        width: 95%;\n    }\n\n    .task-form{\n        min-width: 300px;\n        width: 95%;\n    }\n\n    .task-details{\n        min-width: 300px;\n        width: 95%;\n    }\n    \n}',"",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"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",sourcesContent:[':root{\n    --white: #f2f5f7;\n    --blue: #20a4f3; \n    --turquoise: #59f8e8;\n    --crimson: #941c2f;\n    --black: #03191e;\n}\n\nbody{\n    position: relative;\n    margin: 0;\n    font-family: \'Open Sans\', sans-serif;\n    color: var(--black);\n    background-color: var(--white);\n}\n\n.task-details{\n    font-size: 14px;\n    padding: 10px;\n    z-index: 2;\n    position: absolute;\n    top: 0;\n    bottom: 0;\n    right: 0;\n    left: 0;\n    margin: auto;\n    background-color: var(--white);\n    border-radius: 4px;\n    width: 400px;\n    height: 85%;\n    max-height: 400px;\n    box-shadow: 0 0 5px gray;\n    display: none;\n    flex-direction: column;\n}\n\n.task-details-header{\n    font-size: 16px;\n    color: var(--blue);\n    font-weight: bold;\n    margin-bottom: 10px;\n}\n\n.task-details-title{\n    font-size: 16px;\n    margin-bottom: 5px;\n    word-break: break-word;\n}\n\n.task-details-description{\n    flex-grow: 1;\n    word-break: break-word;\n}\n\n.task-details-priority{\n    margin-bottom: 5px;\n}\n\n.task-details-date{\n    margin-bottom: 5px;\n}\n\n.task-details-project{\n    margin-bottom: 5px;\n    word-break: break-word;\n}\n\n.task-details-buttons{\n    display: flex;\n    justify-content: space-around;\n    align-items: center;\n    height: 30px;\n}\n\n.task-details-buttons>button{\n    cursor: pointer;\n    width: 34%;\n    height: 100%;\n    border-radius: 5px;\n    font-size: 16px;\n    background: none;\n    border: none;\n    background-color: var(--blue);\n    color: var(--white);\n}\n\n.task-form-overlay{\n    display: none;\n    position: absolute;\n    width: 100vw;\n    height: 100vh;\n    top: 0;\n    bottom: 0;\n    right: 0;\n    left: 0;\n    margin: auto;\n}\n\n.task-form{\n    font-size: 14px;\n    padding: 5px;\n    z-index: 2;\n    position: absolute;\n    top: 0;\n    bottom: 0;\n    right: 0;\n    left: 0;\n    margin: auto;\n    background-color: var(--white);\n    border-radius: 4px;\n    width: 400px;\n    height: 85%;\n    max-height: 400px;\n    box-shadow: 0 0 5px gray;\n    display: none;\n    flex-direction: column;\n}\n\n.task-form>div{\n    height: 25px;\n}\n\n.task-form>input{\n    border: none;\n    background: none;\n    box-shadow: 0 0 2px gray;\n    margin-bottom: 5px;\n}\n\n.task-form>textarea{\n    border: none;\n    background: none;\n    box-shadow: 0 0 2px gray;\n    margin-bottom: 5px;\n    resize: none;\n    overflow: auto;\n}\n\n.task-form>select{\n    border: none;\n    background: none;\n    box-shadow: 0 0 2px gray;\n    margin-bottom: 5px;\n}\n\n.task-form>.form-buttons{\n    display: flex;\n    justify-content: space-around;\n    flex-grow: 1;\n    align-items: center;\n}\n\n.task-form>.form-buttons>button{\n    cursor: pointer;\n    width: 34%;\n    height: 66%;\n    border-radius: 5px;\n    font-size: 14px;\n    background: none;\n    border: none;\n    background-color: var(--blue);\n    color: var(--white);\n}\n\n.task-form>.form-buttons>button:hover{\n    background-color: var(--turquoise);\n    color: var(--black);\n    box-shadow: 0 0 2px var(--black);\n}\n\n.project-form{\n    font-size: 14px;\n    padding: 5px;\n    z-index: 2;\n    position: absolute;\n    top: 0;\n    bottom: 0;\n    right: 0;\n    left: 0;\n    margin: auto;\n    background-color: var(--white);\n    border-radius: 4px;\n    width: 400px;\n    height: 90px;\n    box-shadow: 0 0 5px gray;\n    display: none;\n    flex-direction: column;\n    justify-content: space-between;\n}\n\n.project-form>div{\n    height: 25px;\n    display: flex;\n    align-items: center;\n}\n\n.project-form>input{\n    border: none;\n    background: none;\n    box-shadow: 0 0 2px gray;\n    margin-bottom: 5px;\n}\n\n.project-form>.form-buttons{\n    display: flex;\n    justify-content: space-around;\n    flex-grow: 1;\n    align-items: center;\n}\n\n.project-form>.form-buttons>button{\n    cursor: pointer;\n    width: 34%;\n    height: 66%;\n    border-radius: 5px;\n    font-size: 14px;\n    background: none;\n    border: none;\n    background-color: var(--blue);\n    color: var(--white);\n}\n\n.project-form>.form-buttons>button:hover{\n    background-color: var(--turquoise);\n    color: var(--black);\n    box-shadow: 0 0 2px var(--black);\n}\n\n.content{\n    display: flex;\n    flex-direction: column;\n    min-height: 100vh;\n}\n\n.header{\n    background-color: var(--blue);\n    color: var(--white);\n    display: flex;\n    width: 100%;\n    height: 40px;\n    align-items: center;\n}\n\n#menu{\n    display: none;\n    cursor: pointer;\n    width: 30px;\n    text-align: center;\n    font-size: 32px;\n}\n\n#title{\n    cursor: default;\n    padding-right: 30px;\n    flex-grow: 1;\n    text-align: center;\n    font-size: 32px;\n}\n\n.main{\n    flex-grow: 1;\n    display: flex;\n}\n\n.side-panel{\n    position: relative;\n    width: 250px;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n}\n\n.side-panel::after{\n    content: "";\n    background-color: lightgray;\n    position: absolute;\n    top: 5px;\n    right: 0;\n    bottom: 5px;\n    width: 1px;\n}\n\n.views{\n    width: 100%;\n    position: relative;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n}\n\n.views>div{\n    width: 100%;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    height: 40px;\n    cursor: pointer;\n    color:var(--blue);\n}\n\n.views::after{\n    position: absolute;\n    background-color: lightgray;\n    content: "";\n    bottom: 0;\n    left: 20px;\n    right: 20px;\n    height: 1px;\n}\n\n.projects{\n    width: 100%;\n    flex-grow: 1;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n}\n\n.projects>div{\n    display: flex;\n    align-items: center;\n    height: 40px;\n    cursor: pointer;\n    color:var(--blue);\n}\n\n#new-project-container{\n    display: flex;\n    width: calc(100% - 40px);\n    padding-left: 20px;\n    padding-right: 20px;\n    cursor: default;\n}\n\n#projects-title{\n    flex-grow: 1;\n    cursor: default;\n}\n\n#new-project{\n    cursor: pointer;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    width: 30px;\n    height: 30px;\n    font-size: 20px;\n    border-radius: 50%;\n}\n\n#new-project:hover{\n    background-color: var(--blue);\n    color: var(--white);\n}\n\n.project-container{\n    width: 100%;\n    padding-left: 20px;\n    padding-right: 20px;\n    display: flex;\n    flex-direction: column;\n    flex-grow: 1;\n    justify-content: flex-start;\n}\n\n.single-project{\n    width: calc(100% - 40px);\n    height: 40px;\n    display: flex;\n    align-items: center;\n}\n\n.project-name{\n    flex-grow: 1;\n    height: 100%;\n    display: flex;\n    align-items: center;\n    word-break: break-word;\n}\n\n.edit-project{\n    cursor: pointer;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    width: 24px;\n    height: 100%;\n    border-radius: 50%;\n}\n\n.delete-project{\n    cursor: pointer;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    width: 24px;\n    height: 100%;\n    border-radius: 50%;\n}\n\n.tasks{\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    flex-grow: 1;\n}\n\n.tasks-title{\n    color: var(--blue);\n    font-size: 20px;\n    display: flex;\n    width: 90%;\n    max-width: 800px;\n    justify-content: space-between;\n    align-items: center;\n    height: 40px;\n}\n\n#new-task{\n    cursor: pointer;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    width: 30px;\n    height: 30px;\n    font-size: 20px;\n    border-radius: 50%;\n}\n\n#new-task:hover{\n    background-color: var(--blue);\n    color: var(--white);\n}\n\n.task-container{\n    width: 100%;\n    flex-grow: 1;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n}\n\n.task-card{\n    width: 90%;\n    min-width: 300px;\n    max-width: 800px;\n    height: 40px;\n    display: flex;\n    align-items: center;\n    border-radius: 5px;\n    box-shadow: 0 0 3px gray;\n    margin-bottom: 10px;\n    padding-left: 3px;\n    padding-right: 3px;\n}\n\n.priority-high{\n    width: 10px;\n    height: 10px;\n    margin-right: 5px;\n    border-radius: 50%;\n    background-color: red;\n    text-align: center;\n}\n\n.priority-medium{\n    width: 10px;\n    height: 10px;\n    margin-right: 5px;\n    border-radius: 50%;\n    background-color: orange;\n    text-align: center;\n}\n\n.priority-low{\n    width: 10px;\n    height: 10px;\n    margin-right: 5px;\n    border-radius: 50%;\n    background-color: green;\n    text-align: center;\n}\n\n.task-title{\n    flex-grow: 1;\n    height: 100%;\n    display: flex;\n    align-items: center;\n    cursor: pointer;\n    word-break: break-word;\n}\n\n.edit-task{\n    cursor: pointer;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    width: 24px;\n    height: 100%;\n    opacity: 60%;\n}\n\n.delete-task{\n    cursor: pointer;\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    width: 24px;\n    height: 100%;\n    opacity: 60%;\n}\n\n.footer{\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    height: 20px;\n    background-color: var(--white);\n    color: var(--black)\n}\n\n.footer>p>a{\n    text-decoration: none;\n    color: var(--black);\n}\n\n\n@media screen and (max-width: 420px) {\n    .main{\n        display: block;\n        position: relative;\n    }\n\n    #menu{\n        display: block;\n        text-align: end;\n        padding-right: 5px;\n    }\n\n    .side-panel{\n        display: none;\n        position: absolute;\n        left: 0;\n        z-index: 1;\n        background-color: var(--white);\n        height: 100%;\n    }\n\n    .tasks{\n        height: 100%;\n    }\n\n    .project-form{\n        min-width: 300px;\n        width: 95%;\n    }\n\n    .task-form{\n        min-width: 300px;\n        width: 95%;\n    }\n\n    .task-details{\n        min-width: 300px;\n        width: 95%;\n    }\n    \n}'],sourceRoot:""}]);const s=o},645:n=>{n.exports=function(n){var e=[];return e.toString=function(){return this.map((function(e){var t=n(e);return e[2]?"@media ".concat(e[2]," {").concat(t,"}"):t})).join("")},e.i=function(n,t,r){"string"==typeof n&&(n=[[null,n,""]]);var a={};if(r)for(var i=0;i<this.length;i++){var o=this[i][0];null!=o&&(a[o]=!0)}for(var s=0;s<n.length;s++){var A=[].concat(n[s]);r&&a[A[0]]||(t&&(A[2]?A[2]="".concat(t," and ").concat(A[2]):A[2]=t),e.push(A))}},e}},15:n=>{function e(n,e){(null==e||e>n.length)&&(e=n.length);for(var t=0,r=new Array(e);t<e;t++)r[t]=n[t];return r}n.exports=function(n){var t,r,a=(r=4,function(n){if(Array.isArray(n))return n}(t=n)||function(n,e){var t=null==n?null:"undefined"!=typeof Symbol&&n[Symbol.iterator]||n["@@iterator"];if(null!=t){var r,a,i=[],o=!0,s=!1;try{for(t=t.call(n);!(o=(r=t.next()).done)&&(i.push(r.value),!e||i.length!==e);o=!0);}catch(n){s=!0,a=n}finally{try{o||null==t.return||t.return()}finally{if(s)throw a}}return i}}(t,r)||function(n,t){if(n){if("string"==typeof n)return e(n,t);var r=Object.prototype.toString.call(n).slice(8,-1);return"Object"===r&&n.constructor&&(r=n.constructor.name),"Map"===r||"Set"===r?Array.from(n):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?e(n,t):void 0}}(t,r)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),i=a[1],o=a[3];if(!o)return i;if("function"==typeof btoa){var s=btoa(unescape(encodeURIComponent(JSON.stringify(o)))),A="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(s),l="/*# ".concat(A," */"),d=o.sources.map((function(n){return"/*# sourceURL=".concat(o.sourceRoot||"").concat(n," */")}));return[i].concat(d).concat([l]).join("\n")}return[i].join("\n")}},379:n=>{var e=[];function t(n){for(var t=-1,r=0;r<e.length;r++)if(e[r].identifier===n){t=r;break}return t}function r(n,r){for(var i={},o=[],s=0;s<n.length;s++){var A=n[s],l=r.base?A[0]+r.base:A[0],d=i[l]||0,c="".concat(l," ").concat(d);i[l]=d+1;var u=t(c),m={css:A[1],media:A[2],sourceMap:A[3]};-1!==u?(e[u].references++,e[u].updater(m)):e.push({identifier:c,updater:a(m,r),references:1}),o.push(c)}return o}function a(n,e){var t=e.domAPI(e);return t.update(n),function(e){if(e){if(e.css===n.css&&e.media===n.media&&e.sourceMap===n.sourceMap)return;t.update(n=e)}else t.remove()}}n.exports=function(n,a){var i=r(n=n||[],a=a||{});return function(n){n=n||[];for(var o=0;o<i.length;o++){var s=t(i[o]);e[s].references--}for(var A=r(n,a),l=0;l<i.length;l++){var d=t(i[l]);0===e[d].references&&(e[d].updater(),e.splice(d,1))}i=A}}},569:n=>{var e={};n.exports=function(n,t){var r=function(n){if(void 0===e[n]){var t=document.querySelector(n);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(n){t=null}e[n]=t}return e[n]}(n);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(t)}},216:n=>{n.exports=function(n){var e=document.createElement("style");return n.setAttributes(e,n.attributes),n.insert(e),e}},565:(n,e,t)=>{n.exports=function(n){var e=t.nc;e&&n.setAttribute("nonce",e)}},795:n=>{n.exports=function(n){var e=n.insertStyleElement(n);return{update:function(t){!function(n,e,t){var r=t.css,a=t.media,i=t.sourceMap;a?n.setAttribute("media",a):n.removeAttribute("media"),i&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),e.styleTagTransform(r,n)}(e,n,t)},remove:function(){!function(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n)}(e)}}}},589:n=>{n.exports=function(n,e){if(e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}}},e={};function t(r){var a=e[r];if(void 0!==a)return a.exports;var i=e[r]={id:r,exports:{}};return n[r](i,i.exports,t),i.exports}t.n=n=>{var e=n&&n.__esModule?()=>n.default:()=>n;return t.d(e,{a:e}),e},t.d=(n,e)=>{for(var r in e)t.o(e,r)&&!t.o(n,r)&&Object.defineProperty(n,r,{enumerable:!0,get:e[r]})},t.o=(n,e)=>Object.prototype.hasOwnProperty.call(n,e),(()=>{let n=[];localStorage.projects&&(n=JSON.parse(localStorage.projects));const e=()=>n;function r(n,e){if(e.length<n)throw new TypeError(n+" argument"+(n>1?"s":"")+" required, but only "+e.length+" present")}function a(n){r(1,arguments);var e=Object.prototype.toString.call(n);return n instanceof Date||"object"==typeof n&&"[object Date]"===e?new Date(n.getTime()):"number"==typeof n||"[object Number]"===e?new Date(n):("string"!=typeof n&&"[object String]"!==e||"undefined"==typeof console||(console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://git.io/fjule"),console.warn((new Error).stack)),new Date(NaN))}function i(n){r(1,arguments);var e=a(n);return e.setHours(0,0,0,0),e}function o(n,e){r(2,arguments);var t=i(n),a=i(e);return t.getTime()===a.getTime()}function s(n){if(null===n||!0===n||!1===n)return NaN;var e=Number(n);return isNaN(e)?e:e<0?Math.ceil(e):Math.floor(e)}var A=36e5,l={dateTimeDelimiter:/[T ]/,timeZoneDelimiter:/[Z ]/i,timezone:/([Z+-].*)$/},d=/^-?(?:(\d{3})|(\d{2})(?:-?(\d{2}))?|W(\d{2})(?:-?(\d{1}))?|)$/,c=/^(\d{2}(?:[.,]\d*)?)(?::?(\d{2}(?:[.,]\d*)?))?(?::?(\d{2}(?:[.,]\d*)?))?$/,u=/^([+-])(\d{2})(?::?(\d{2}))?$/;function m(n,e){r(1,arguments);var t=e||{},a=null==t.additionalDigits?2:s(t.additionalDigits);if(2!==a&&1!==a&&0!==a)throw new RangeError("additionalDigits must be 0, 1 or 2");if("string"!=typeof n&&"[object String]"!==Object.prototype.toString.call(n))return new Date(NaN);var i,o=h(n);if(o.date){var A=f(o.date,a);i=p(A.restDateString,A.year)}if(isNaN(i)||!i)return new Date(NaN);var l,d=i.getTime(),c=0;if(o.time&&(c=C(o.time),isNaN(c)||null===c))return new Date(NaN);if(!o.timezone){var u=new Date(d+c),m=new Date(0);return m.setFullYear(u.getUTCFullYear(),u.getUTCMonth(),u.getUTCDate()),m.setHours(u.getUTCHours(),u.getUTCMinutes(),u.getUTCSeconds(),u.getUTCMilliseconds()),m}return l=b(o.timezone),isNaN(l)?new Date(NaN):new Date(d+c+l)}function h(n){var e,t={},r=n.split(l.dateTimeDelimiter);if(r.length>2)return t;if(/:/.test(r[0])?(t.date=null,e=r[0]):(t.date=r[0],e=r[1],l.timeZoneDelimiter.test(t.date)&&(t.date=n.split(l.timeZoneDelimiter)[0],e=n.substr(t.date.length,n.length))),e){var a=l.timezone.exec(e);a?(t.time=e.replace(a[1],""),t.timezone=a[1]):t.time=e}return t}function f(n,e){var t=new RegExp("^(?:(\\d{4}|[+-]\\d{"+(4+e)+"})|(\\d{2}|[+-]\\d{"+(2+e)+"})$)"),r=n.match(t);if(!r)return{year:null};var a=r[1]&&parseInt(r[1]),i=r[2]&&parseInt(r[2]);return{year:null==i?a:100*i,restDateString:n.slice((r[1]||r[2]).length)}}function p(n,e){if(null===e)return null;var t=n.match(d);if(!t)return null;var r=!!t[4],a=g(t[1]),i=g(t[2])-1,o=g(t[3]),s=g(t[4]),A=g(t[5])-1;if(r)return function(n,e,t){return e>=1&&e<=53&&t>=0&&t<=6}(0,s,A)?function(n,e,t){var r=new Date(0);r.setUTCFullYear(n,0,4);var a=7*(e-1)+t+1-(r.getUTCDay()||7);return r.setUTCDate(r.getUTCDate()+a),r}(e,s,A):new Date(NaN);var l=new Date(0);return function(n,e,t){return e>=0&&e<=11&&t>=1&&t<=(w[e]||(x(n)?29:28))}(e,i,o)&&function(n,e){return e>=1&&e<=(x(n)?366:365)}(e,a)?(l.setUTCFullYear(e,i,Math.max(a,o)),l):new Date(NaN)}function g(n){return n?parseInt(n):1}function C(n){var e=n.match(c);if(!e)return null;var t=B(e[1]),r=B(e[2]),a=B(e[3]);return function(n,e,t){return 24===n?0===e&&0===t:t>=0&&t<60&&e>=0&&e<60&&n>=0&&n<25}(t,r,a)?t*A+6e4*r+1e3*a:NaN}function B(n){return n&&parseFloat(n.replace(",","."))||0}function b(n){if("Z"===n)return 0;var e=n.match(u);if(!e)return 0;var t="+"===e[1]?-1:1,r=parseInt(e[2]),a=e[3]&&parseInt(e[3])||0;return function(n,e){return e>=0&&e<=59}(0,a)?t*(r*A+6e4*a):NaN}var w=[31,null,31,30,31,30,31,31,30,31,30,31];function x(n){return n%400==0||n%4==0&&n%100}function I(n,e){r(1,arguments);var t=e||{},i=t.locale,o=i&&i.options&&i.options.weekStartsOn,A=null==o?0:s(o),l=null==t.weekStartsOn?A:s(t.weekStartsOn);if(!(l>=0&&l<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");var d=a(n),c=d.getDay(),u=(c<l?7:0)+c-l;return d.setDate(d.getDate()-u),d.setHours(0,0,0,0),d}function y(n,e,t){r(2,arguments);var a=I(n,t),i=I(e,t);return a.getTime()===i.getTime()}function v(n,e){r(2,arguments);var t=a(n),i=a(e),o=t.getTime()-i.getTime();return o<0?-1:o>0?1:o}function k(n){r(1,arguments);var e=a(n);return!isNaN(e)}var T={lessThanXSeconds:{one:"less than a second",other:"less than {{count}} seconds"},xSeconds:{one:"1 second",other:"{{count}} seconds"},halfAMinute:"half a minute",lessThanXMinutes:{one:"less than a minute",other:"less than {{count}} minutes"},xMinutes:{one:"1 minute",other:"{{count}} minutes"},aboutXHours:{one:"about 1 hour",other:"about {{count}} hours"},xHours:{one:"1 hour",other:"{{count}} hours"},xDays:{one:"1 day",other:"{{count}} days"},aboutXWeeks:{one:"about 1 week",other:"about {{count}} weeks"},xWeeks:{one:"1 week",other:"{{count}} weeks"},aboutXMonths:{one:"about 1 month",other:"about {{count}} months"},xMonths:{one:"1 month",other:"{{count}} months"},aboutXYears:{one:"about 1 year",other:"about {{count}} years"},xYears:{one:"1 year",other:"{{count}} years"},overXYears:{one:"over 1 year",other:"over {{count}} years"},almostXYears:{one:"almost 1 year",other:"almost {{count}} years"}};function E(n){return function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=e.width?String(e.width):n.defaultWidth,r=n.formats[t]||n.formats[n.defaultWidth];return r}}const j={date:E({formats:{full:"EEEE, MMMM do, y",long:"MMMM do, y",medium:"MMM d, y",short:"MM/dd/yyyy"},defaultWidth:"full"}),time:E({formats:{full:"h:mm:ss a zzzz",long:"h:mm:ss a z",medium:"h:mm:ss a",short:"h:mm a"},defaultWidth:"full"}),dateTime:E({formats:{full:"{{date}} 'at' {{time}}",long:"{{date}} 'at' {{time}}",medium:"{{date}}, {{time}}",short:"{{date}}, {{time}}"},defaultWidth:"full"})};var Y={lastWeek:"'last' eeee 'at' p",yesterday:"'yesterday at' p",today:"'today at' p",tomorrow:"'tomorrow at' p",nextWeek:"eeee 'at' p",other:"P"};function S(n){return function(e,t){var r,a=t||{};if("formatting"===(a.context?String(a.context):"standalone")&&n.formattingValues){var i=n.defaultFormattingWidth||n.defaultWidth,o=a.width?String(a.width):i;r=n.formattingValues[o]||n.formattingValues[i]}else{var s=n.defaultWidth,A=a.width?String(a.width):n.defaultWidth;r=n.values[A]||n.values[s]}return r[n.argumentCallback?n.argumentCallback(e):e]}}const D={ordinalNumber:function(n,e){var t=Number(n),r=t%100;if(r>20||r<10)switch(r%10){case 1:return t+"st";case 2:return t+"nd";case 3:return t+"rd"}return t+"th"},era:S({values:{narrow:["B","A"],abbreviated:["BC","AD"],wide:["Before Christ","Anno Domini"]},defaultWidth:"wide"}),quarter:S({values:{narrow:["1","2","3","4"],abbreviated:["Q1","Q2","Q3","Q4"],wide:["1st quarter","2nd quarter","3rd quarter","4th quarter"]},defaultWidth:"wide",argumentCallback:function(n){return Number(n)-1}}),month:S({values:{narrow:["J","F","M","A","M","J","J","A","S","O","N","D"],abbreviated:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],wide:["January","February","March","April","May","June","July","August","September","October","November","December"]},defaultWidth:"wide"}),day:S({values:{narrow:["S","M","T","W","T","F","S"],short:["Su","Mo","Tu","We","Th","Fr","Sa"],abbreviated:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],wide:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]},defaultWidth:"wide"}),dayPeriod:S({values:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"}},defaultWidth:"wide",formattingValues:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"}},defaultFormattingWidth:"wide"})};function M(n){return function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},r=t.width,a=r&&n.matchPatterns[r]||n.matchPatterns[n.defaultMatchWidth],i=e.match(a);if(!i)return null;var o,s=i[0],A=r&&n.parsePatterns[r]||n.parsePatterns[n.defaultParseWidth],l=Array.isArray(A)?W(A,(function(n){return n.test(s)})):P(A,(function(n){return n.test(s)}));o=n.valueCallback?n.valueCallback(l):l,o=t.valueCallback?t.valueCallback(o):o;var d=e.slice(s.length);return{value:o,rest:d}}}function P(n,e){for(var t in n)if(n.hasOwnProperty(t)&&e(n[t]))return t}function W(n,e){for(var t=0;t<n.length;t++)if(e(n[t]))return t}var U,N={ordinalNumber:(U={matchPattern:/^(\d+)(th|st|nd|rd)?/i,parsePattern:/\d+/i,valueCallback:function(n){return parseInt(n,10)}},function(n){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},t=n.match(U.matchPattern);if(!t)return null;var r=t[0],a=n.match(U.parsePattern);if(!a)return null;var i=U.valueCallback?U.valueCallback(a[0]):a[0];i=e.valueCallback?e.valueCallback(i):i;var o=n.slice(r.length);return{value:i,rest:o}}),era:M({matchPatterns:{narrow:/^(b|a)/i,abbreviated:/^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,wide:/^(before christ|before common era|anno domini|common era)/i},defaultMatchWidth:"wide",parsePatterns:{any:[/^b/i,/^(a|c)/i]},defaultParseWidth:"any"}),quarter:M({matchPatterns:{narrow:/^[1234]/i,abbreviated:/^q[1234]/i,wide:/^[1234](th|st|nd|rd)? quarter/i},defaultMatchWidth:"wide",parsePatterns:{any:[/1/i,/2/i,/3/i,/4/i]},defaultParseWidth:"any",valueCallback:function(n){return n+1}}),month:M({matchPatterns:{narrow:/^[jfmasond]/i,abbreviated:/^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,wide:/^(january|february|march|april|may|june|july|august|september|october|november|december)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^j/i,/^f/i,/^m/i,/^a/i,/^m/i,/^j/i,/^j/i,/^a/i,/^s/i,/^o/i,/^n/i,/^d/i],any:[/^ja/i,/^f/i,/^mar/i,/^ap/i,/^may/i,/^jun/i,/^jul/i,/^au/i,/^s/i,/^o/i,/^n/i,/^d/i]},defaultParseWidth:"any"}),day:M({matchPatterns:{narrow:/^[smtwf]/i,short:/^(su|mo|tu|we|th|fr|sa)/i,abbreviated:/^(sun|mon|tue|wed|thu|fri|sat)/i,wide:/^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^s/i,/^m/i,/^t/i,/^w/i,/^t/i,/^f/i,/^s/i],any:[/^su/i,/^m/i,/^tu/i,/^w/i,/^th/i,/^f/i,/^sa/i]},defaultParseWidth:"any"}),dayPeriod:M({matchPatterns:{narrow:/^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,any:/^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i},defaultMatchWidth:"any",parsePatterns:{any:{am:/^a/i,pm:/^p/i,midnight:/^mi/i,noon:/^no/i,morning:/morning/i,afternoon:/afternoon/i,evening:/evening/i,night:/night/i}},defaultParseWidth:"any"})},O={code:"en-US",formatDistance:function(n,e,t){var r;return t=t||{},r="string"==typeof T[n]?T[n]:1===e?T[n].one:T[n].other.replace("{{count}}",e),t.addSuffix?t.comparison>0?"in "+r:r+" ago":r},formatLong:j,formatRelative:function(n,e,t,r){return Y[n]},localize:D,match:N,options:{weekStartsOn:0,firstWeekContainsDate:1}};const z=O;function Z(n,e){r(2,arguments);var t=a(n).getTime(),i=s(e);return new Date(t+i)}function q(n,e){r(2,arguments);var t=s(e);return Z(n,-t)}function L(n,e){for(var t=n<0?"-":"",r=Math.abs(n).toString();r.length<e;)r="0"+r;return t+r}const Q=function(n,e){var t=n.getUTCFullYear(),r=t>0?t:1-t;return L("yy"===e?r%100:r,e.length)},X=function(n,e){var t=n.getUTCMonth();return"M"===e?String(t+1):L(t+1,2)},F=function(n,e){return L(n.getUTCDate(),e.length)},H=function(n,e){return L(n.getUTCHours()%12||12,e.length)},R=function(n,e){return L(n.getUTCHours(),e.length)},J=function(n,e){return L(n.getUTCMinutes(),e.length)},G=function(n,e){return L(n.getUTCSeconds(),e.length)},V=function(n,e){var t=e.length,r=n.getUTCMilliseconds();return L(Math.floor(r*Math.pow(10,t-3)),e.length)};var $=864e5;function _(n){r(1,arguments);var e=1,t=a(n),i=t.getUTCDay(),o=(i<e?7:0)+i-e;return t.setUTCDate(t.getUTCDate()-o),t.setUTCHours(0,0,0,0),t}function K(n){r(1,arguments);var e=a(n),t=e.getUTCFullYear(),i=new Date(0);i.setUTCFullYear(t+1,0,4),i.setUTCHours(0,0,0,0);var o=_(i),s=new Date(0);s.setUTCFullYear(t,0,4),s.setUTCHours(0,0,0,0);var A=_(s);return e.getTime()>=o.getTime()?t+1:e.getTime()>=A.getTime()?t:t-1}function nn(n){r(1,arguments);var e=K(n),t=new Date(0);t.setUTCFullYear(e,0,4),t.setUTCHours(0,0,0,0);var a=_(t);return a}var en=6048e5;function tn(n,e){r(1,arguments);var t=e||{},i=t.locale,o=i&&i.options&&i.options.weekStartsOn,A=null==o?0:s(o),l=null==t.weekStartsOn?A:s(t.weekStartsOn);if(!(l>=0&&l<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");var d=a(n),c=d.getUTCDay(),u=(c<l?7:0)+c-l;return d.setUTCDate(d.getUTCDate()-u),d.setUTCHours(0,0,0,0),d}function rn(n,e){r(1,arguments);var t=a(n,e),i=t.getUTCFullYear(),o=e||{},A=o.locale,l=A&&A.options&&A.options.firstWeekContainsDate,d=null==l?1:s(l),c=null==o.firstWeekContainsDate?d:s(o.firstWeekContainsDate);if(!(c>=1&&c<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var u=new Date(0);u.setUTCFullYear(i+1,0,c),u.setUTCHours(0,0,0,0);var m=tn(u,e),h=new Date(0);h.setUTCFullYear(i,0,c),h.setUTCHours(0,0,0,0);var f=tn(h,e);return t.getTime()>=m.getTime()?i+1:t.getTime()>=f.getTime()?i:i-1}function an(n,e){r(1,arguments);var t=e||{},a=t.locale,i=a&&a.options&&a.options.firstWeekContainsDate,o=null==i?1:s(i),A=null==t.firstWeekContainsDate?o:s(t.firstWeekContainsDate),l=rn(n,e),d=new Date(0);d.setUTCFullYear(l,0,A),d.setUTCHours(0,0,0,0);var c=tn(d,e);return c}var on=6048e5,sn={G:function(n,e,t){var r=n.getUTCFullYear()>0?1:0;switch(e){case"G":case"GG":case"GGG":return t.era(r,{width:"abbreviated"});case"GGGGG":return t.era(r,{width:"narrow"});default:return t.era(r,{width:"wide"})}},y:function(n,e,t){if("yo"===e){var r=n.getUTCFullYear(),a=r>0?r:1-r;return t.ordinalNumber(a,{unit:"year"})}return Q(n,e)},Y:function(n,e,t,r){var a=rn(n,r),i=a>0?a:1-a;return"YY"===e?L(i%100,2):"Yo"===e?t.ordinalNumber(i,{unit:"year"}):L(i,e.length)},R:function(n,e){return L(K(n),e.length)},u:function(n,e){return L(n.getUTCFullYear(),e.length)},Q:function(n,e,t){var r=Math.ceil((n.getUTCMonth()+1)/3);switch(e){case"Q":return String(r);case"QQ":return L(r,2);case"Qo":return t.ordinalNumber(r,{unit:"quarter"});case"QQQ":return t.quarter(r,{width:"abbreviated",context:"formatting"});case"QQQQQ":return t.quarter(r,{width:"narrow",context:"formatting"});default:return t.quarter(r,{width:"wide",context:"formatting"})}},q:function(n,e,t){var r=Math.ceil((n.getUTCMonth()+1)/3);switch(e){case"q":return String(r);case"qq":return L(r,2);case"qo":return t.ordinalNumber(r,{unit:"quarter"});case"qqq":return t.quarter(r,{width:"abbreviated",context:"standalone"});case"qqqqq":return t.quarter(r,{width:"narrow",context:"standalone"});default:return t.quarter(r,{width:"wide",context:"standalone"})}},M:function(n,e,t){var r=n.getUTCMonth();switch(e){case"M":case"MM":return X(n,e);case"Mo":return t.ordinalNumber(r+1,{unit:"month"});case"MMM":return t.month(r,{width:"abbreviated",context:"formatting"});case"MMMMM":return t.month(r,{width:"narrow",context:"formatting"});default:return t.month(r,{width:"wide",context:"formatting"})}},L:function(n,e,t){var r=n.getUTCMonth();switch(e){case"L":return String(r+1);case"LL":return L(r+1,2);case"Lo":return t.ordinalNumber(r+1,{unit:"month"});case"LLL":return t.month(r,{width:"abbreviated",context:"standalone"});case"LLLLL":return t.month(r,{width:"narrow",context:"standalone"});default:return t.month(r,{width:"wide",context:"standalone"})}},w:function(n,e,t,i){var o=function(n,e){r(1,arguments);var t=a(n),i=tn(t,e).getTime()-an(t,e).getTime();return Math.round(i/on)+1}(n,i);return"wo"===e?t.ordinalNumber(o,{unit:"week"}):L(o,e.length)},I:function(n,e,t){var i=function(n){r(1,arguments);var e=a(n),t=_(e).getTime()-nn(e).getTime();return Math.round(t/en)+1}(n);return"Io"===e?t.ordinalNumber(i,{unit:"week"}):L(i,e.length)},d:function(n,e,t){return"do"===e?t.ordinalNumber(n.getUTCDate(),{unit:"date"}):F(n,e)},D:function(n,e,t){var i=function(n){r(1,arguments);var e=a(n),t=e.getTime();e.setUTCMonth(0,1),e.setUTCHours(0,0,0,0);var i=e.getTime(),o=t-i;return Math.floor(o/$)+1}(n);return"Do"===e?t.ordinalNumber(i,{unit:"dayOfYear"}):L(i,e.length)},E:function(n,e,t){var r=n.getUTCDay();switch(e){case"E":case"EE":case"EEE":return t.day(r,{width:"abbreviated",context:"formatting"});case"EEEEE":return t.day(r,{width:"narrow",context:"formatting"});case"EEEEEE":return t.day(r,{width:"short",context:"formatting"});default:return t.day(r,{width:"wide",context:"formatting"})}},e:function(n,e,t,r){var a=n.getUTCDay(),i=(a-r.weekStartsOn+8)%7||7;switch(e){case"e":return String(i);case"ee":return L(i,2);case"eo":return t.ordinalNumber(i,{unit:"day"});case"eee":return t.day(a,{width:"abbreviated",context:"formatting"});case"eeeee":return t.day(a,{width:"narrow",context:"formatting"});case"eeeeee":return t.day(a,{width:"short",context:"formatting"});default:return t.day(a,{width:"wide",context:"formatting"})}},c:function(n,e,t,r){var a=n.getUTCDay(),i=(a-r.weekStartsOn+8)%7||7;switch(e){case"c":return String(i);case"cc":return L(i,e.length);case"co":return t.ordinalNumber(i,{unit:"day"});case"ccc":return t.day(a,{width:"abbreviated",context:"standalone"});case"ccccc":return t.day(a,{width:"narrow",context:"standalone"});case"cccccc":return t.day(a,{width:"short",context:"standalone"});default:return t.day(a,{width:"wide",context:"standalone"})}},i:function(n,e,t){var r=n.getUTCDay(),a=0===r?7:r;switch(e){case"i":return String(a);case"ii":return L(a,e.length);case"io":return t.ordinalNumber(a,{unit:"day"});case"iii":return t.day(r,{width:"abbreviated",context:"formatting"});case"iiiii":return t.day(r,{width:"narrow",context:"formatting"});case"iiiiii":return t.day(r,{width:"short",context:"formatting"});default:return t.day(r,{width:"wide",context:"formatting"})}},a:function(n,e,t){var r=n.getUTCHours()/12>=1?"pm":"am";switch(e){case"a":case"aa":return t.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"aaa":return t.dayPeriod(r,{width:"abbreviated",context:"formatting"}).toLowerCase();case"aaaaa":return t.dayPeriod(r,{width:"narrow",context:"formatting"});default:return t.dayPeriod(r,{width:"wide",context:"formatting"})}},b:function(n,e,t){var r,a=n.getUTCHours();switch(r=12===a?"noon":0===a?"midnight":a/12>=1?"pm":"am",e){case"b":case"bb":return t.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"bbb":return t.dayPeriod(r,{width:"abbreviated",context:"formatting"}).toLowerCase();case"bbbbb":return t.dayPeriod(r,{width:"narrow",context:"formatting"});default:return t.dayPeriod(r,{width:"wide",context:"formatting"})}},B:function(n,e,t){var r,a=n.getUTCHours();switch(r=a>=17?"evening":a>=12?"afternoon":a>=4?"morning":"night",e){case"B":case"BB":case"BBB":return t.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"BBBBB":return t.dayPeriod(r,{width:"narrow",context:"formatting"});default:return t.dayPeriod(r,{width:"wide",context:"formatting"})}},h:function(n,e,t){if("ho"===e){var r=n.getUTCHours()%12;return 0===r&&(r=12),t.ordinalNumber(r,{unit:"hour"})}return H(n,e)},H:function(n,e,t){return"Ho"===e?t.ordinalNumber(n.getUTCHours(),{unit:"hour"}):R(n,e)},K:function(n,e,t){var r=n.getUTCHours()%12;return"Ko"===e?t.ordinalNumber(r,{unit:"hour"}):L(r,e.length)},k:function(n,e,t){var r=n.getUTCHours();return 0===r&&(r=24),"ko"===e?t.ordinalNumber(r,{unit:"hour"}):L(r,e.length)},m:function(n,e,t){return"mo"===e?t.ordinalNumber(n.getUTCMinutes(),{unit:"minute"}):J(n,e)},s:function(n,e,t){return"so"===e?t.ordinalNumber(n.getUTCSeconds(),{unit:"second"}):G(n,e)},S:function(n,e){return V(n,e)},X:function(n,e,t,r){var a=(r._originalDate||n).getTimezoneOffset();if(0===a)return"Z";switch(e){case"X":return ln(a);case"XXXX":case"XX":return dn(a);default:return dn(a,":")}},x:function(n,e,t,r){var a=(r._originalDate||n).getTimezoneOffset();switch(e){case"x":return ln(a);case"xxxx":case"xx":return dn(a);default:return dn(a,":")}},O:function(n,e,t,r){var a=(r._originalDate||n).getTimezoneOffset();switch(e){case"O":case"OO":case"OOO":return"GMT"+An(a,":");default:return"GMT"+dn(a,":")}},z:function(n,e,t,r){var a=(r._originalDate||n).getTimezoneOffset();switch(e){case"z":case"zz":case"zzz":return"GMT"+An(a,":");default:return"GMT"+dn(a,":")}},t:function(n,e,t,r){var a=r._originalDate||n;return L(Math.floor(a.getTime()/1e3),e.length)},T:function(n,e,t,r){return L((r._originalDate||n).getTime(),e.length)}};function An(n,e){var t=n>0?"-":"+",r=Math.abs(n),a=Math.floor(r/60),i=r%60;if(0===i)return t+String(a);var o=e||"";return t+String(a)+o+L(i,2)}function ln(n,e){return n%60==0?(n>0?"-":"+")+L(Math.abs(n)/60,2):dn(n,e)}function dn(n,e){var t=e||"",r=n>0?"-":"+",a=Math.abs(n);return r+L(Math.floor(a/60),2)+t+L(a%60,2)}const cn=sn;function un(n,e){switch(n){case"P":return e.date({width:"short"});case"PP":return e.date({width:"medium"});case"PPP":return e.date({width:"long"});default:return e.date({width:"full"})}}function mn(n,e){switch(n){case"p":return e.time({width:"short"});case"pp":return e.time({width:"medium"});case"ppp":return e.time({width:"long"});default:return e.time({width:"full"})}}const hn={p:mn,P:function(n,e){var t,r=n.match(/(P+)(p+)?/),a=r[1],i=r[2];if(!i)return un(n,e);switch(a){case"P":t=e.dateTime({width:"short"});break;case"PP":t=e.dateTime({width:"medium"});break;case"PPP":t=e.dateTime({width:"long"});break;default:t=e.dateTime({width:"full"})}return t.replace("{{date}}",un(a,e)).replace("{{time}}",mn(i,e))}};function fn(n){var e=new Date(Date.UTC(n.getFullYear(),n.getMonth(),n.getDate(),n.getHours(),n.getMinutes(),n.getSeconds(),n.getMilliseconds()));return e.setUTCFullYear(n.getFullYear()),n.getTime()-e.getTime()}var pn=["D","DD"],gn=["YY","YYYY"];function Cn(n){return-1!==pn.indexOf(n)}function Bn(n){return-1!==gn.indexOf(n)}function bn(n,e,t){if("YYYY"===n)throw new RangeError("Use `yyyy` instead of `YYYY` (in `".concat(e,"`) for formatting years to the input `").concat(t,"`; see: https://git.io/fxCyr"));if("YY"===n)throw new RangeError("Use `yy` instead of `YY` (in `".concat(e,"`) for formatting years to the input `").concat(t,"`; see: https://git.io/fxCyr"));if("D"===n)throw new RangeError("Use `d` instead of `D` (in `".concat(e,"`) for formatting days of the month to the input `").concat(t,"`; see: https://git.io/fxCyr"));if("DD"===n)throw new RangeError("Use `dd` instead of `DD` (in `".concat(e,"`) for formatting days of the month to the input `").concat(t,"`; see: https://git.io/fxCyr"))}var wn=/[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g,xn=/P+p+|P+|p+|''|'(''|[^'])+('|$)|./g,In=/^'([^]*?)'?$/,yn=/''/g,vn=/[a-zA-Z]/;function kn(n){return n.match(In)[1].replace(yn,"'")}const Tn=n=>{let e=n.map((n=>n)),t=[],i=[];return e.forEach((n=>{i.push(m(n.date))})),i=i.sort(v),i.forEach((n=>{const i=e.findIndex((e=>e.date===function(n,e,t){r(2,arguments);var i=String(e),o=t||{},A=o.locale||z,l=A.options&&A.options.firstWeekContainsDate,d=null==l?1:s(l),c=null==o.firstWeekContainsDate?d:s(o.firstWeekContainsDate);if(!(c>=1&&c<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var u=A.options&&A.options.weekStartsOn,m=null==u?0:s(u),h=null==o.weekStartsOn?m:s(o.weekStartsOn);if(!(h>=0&&h<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");if(!A.localize)throw new RangeError("locale must contain localize property");if(!A.formatLong)throw new RangeError("locale must contain formatLong property");var f=a(n);if(!k(f))throw new RangeError("Invalid time value");var p=fn(f),g=q(f,p),C={firstWeekContainsDate:c,weekStartsOn:h,locale:A,_originalDate:f};return i.match(xn).map((function(n){var e=n[0];return"p"===e||"P"===e?(0,hn[e])(n,A.formatLong,C):n})).join("").match(wn).map((function(t){if("''"===t)return"'";var r=t[0];if("'"===r)return kn(t);var a=cn[r];if(a)return!o.useAdditionalWeekYearTokens&&Bn(t)&&bn(t,e,n),!o.useAdditionalDayOfYearTokens&&Cn(t)&&bn(t,e,n),a(g,t,A.localize,C);if(r.match(vn))throw new RangeError("Format string contains an unescaped latin alphabet character `"+r+"`");return t})).join("")}(n,"yyyy-MM-dd")));t.push(e[i]),e.splice(i,1)})),console.log(t),t};let En=[];localStorage.tasks&&(En=JSON.parse(localStorage.tasks));const jn=n=>{En=n,localStorage.tasks=JSON.stringify(En)},Yn=()=>En,Sn=()=>{"none"===Ln.sidePanel.style.display||""===Ln.sidePanel.style.display?(Ln.menu.style.width="250px",Ln.sidePanel.style.display="block"):(Ln.menu.style.width="30px",Ln.sidePanel.style.display="none")},Dn=n=>{window.innerWidth<=420&&"block"===Ln.sidePanel.style.display&&Sn();const e=document.querySelector(".task-form");if("none"===e.style.display||""===e.style.display){if(""!=n){let e=Yn(),t=e.findIndex((e=>e.id===n));t>=0&&(Ln.taskTitle.value=e[t].title,Ln.taskDescription.value=e[t].description,Ln.taskPriority.value=e[t].priority,Ln.taskDate.value=e[t].date,Ln.taskProject.value=e[t].project,Ln.saveTask.setAttribute("id",e[t].id))}else Ln.taskTitle.value="",Ln.taskDescription.value="",Ln.taskPriority.value="medium",Ln.taskDate.value=(new Date).toISOString().slice(0,10),Ln.taskProject.value="",Ln.saveTask.setAttribute("id","");e.style.display="flex",Ln.formOverlay.style.display="block"}else e.style.display="none",Ln.formOverlay.style.display="none"},Mn=n=>{(n=>{let e=En.findIndex((e=>e.id===n));En.splice(e,1),localStorage.tasks=JSON.stringify(En)})(n),qn()},Pn=n=>{window.innerWidth<=420&&"block"===Ln.sidePanel.style.display&&Sn();const t=document.querySelector(".project-form");if("none"===t.style.display||""===t.style.display){if(""!=n){let t=e(),r=t.findIndex((e=>e.id===n));r>=0&&(Ln.projectName.value=t[r].name,Ln.saveProject.setAttribute("id",t[r].id))}else Ln.projectName.value="",Ln.saveProject.setAttribute("id","");t.style.display="flex",Ln.formOverlay.style.display="block"}else t.style.display="none",Ln.formOverlay.style.display="none"},Wn=()=>{const t=Ln.saveProject.getAttribute("id");""!=t?((e,t)=>{let r=n.findIndex((n=>n.id===e));r>=0&&(Yn().forEach((e=>{e.project===n[r].name&&((n,e)=>{let t=En.findIndex((e=>e.id===n));t>=0&&(En[t].project=e,localStorage.tasks=JSON.stringify(En))})(e.id,t)})),n[r].name=t,localStorage.projects=JSON.stringify(n))})(t,Ln.projectName.value):(e=>{if(n.length>=1e6)alert("Project limit reached: 1 million projects");else{let t="",r=!0;for(;r;)t=Math.floor(1e6*Math.random()).toString(),r=!1,n.forEach((n=>{n.id===t&&(r=!0)}));const a=(({name:n,id:e})=>({name:n,id:e}))({name:e,id:t});n.push(a),localStorage.projects=JSON.stringify(n)}})(Ln.projectName.value),Pn(""),Qn(e())},Un=t=>{confirm("Are you sure you want to delete this project. This will delete its tasks too.")&&((e=>{let t=n.findIndex((n=>n.id===e));if(t>=0){let e=Yn(),r=[];e.forEach((e=>{e.project!=n[t].name&&r.push(e)})),jn(r),n.splice(t,1),localStorage.projects=JSON.stringify(n)}})(t),Qn(e()),qn())};let Nn="All tasks";const On=()=>{window.innerWidth<=420&&"block"===Ln.sidePanel.style.display&&Sn(),Nn="All tasks",Ln.domTasksTitle.textContent="All tasks:",Xn(Tn(Yn()))},zn=()=>{window.innerWidth<=420&&"block"===Ln.sidePanel.style.display&&Sn(),Nn="Today",Ln.domTasksTitle.textContent="Today's tasks:",Xn((()=>{let n=Tn(Yn()),e=[];return n.forEach((n=>{(function(n){return r(1,arguments),o(n,Date.now())})(m(n.date))&&e.push(n)})),e})())},Zn=()=>{window.innerWidth<=420&&"block"===Ln.sidePanel.style.display&&Sn(),Nn="This week",Ln.domTasksTitle.textContent="This week's tasks:",Xn((()=>{let n=Tn(Yn()),e=[];return n.forEach((n=>{(function(n,e){return r(1,arguments),y(n,Date.now(),e)})(m(n.date))&&e.push(n)})),e})())},qn=()=>{switch(Nn){case"All tasks":On();break;case"Today":zn();break;case"This week":Zn()}},Ln={menu:document.getElementById("menu"),newTask:document.getElementById("new-task"),newProject:document.getElementById("new-project"),taskTitle:document.getElementById("task-form-title"),taskDescription:document.getElementById("task-form-description"),taskPriority:document.getElementById("task-form-priority"),taskDate:document.getElementById("task-form-date"),taskProject:document.getElementById("task-form-project"),saveTask:document.querySelector(".task-save-button"),cancelTask:document.querySelector(".task-cancel-button"),projectName:document.getElementById("project-form-name"),saveProject:document.querySelector(".project-save-button"),cancelProject:document.querySelector(".project-cancel-button"),allTasks:document.getElementById("all-tasks"),today:document.getElementById("today"),thisWeek:document.getElementById("this-week"),domTasksTitle:document.getElementById("tasks-dom-title"),taskDetailsTitle:document.querySelector(".task-details-title"),taskDetailsDescription:document.querySelector(".task-details-description"),taskDetailsPriority:document.querySelector(".task-details-priority"),taskDetailsDate:document.querySelector(".task-details-date"),taskDetailsProject:document.querySelector(".task-details-project"),taskDetailsOkButton:document.querySelector(".task-details-ok-button"),formOverlay:document.querySelector(".task-form-overlay"),sidePanel:document.querySelector(".side-panel")};Ln.menu.addEventListener("click",(()=>{Sn()})),Ln.newTask.addEventListener("click",(()=>{Dn("")})),Ln.newProject.addEventListener("click",(()=>{Pn("")})),Ln.cancelTask.addEventListener("click",(()=>{Dn("")})),Ln.cancelProject.addEventListener("click",(()=>{Pn("")})),Ln.allTasks.addEventListener("click",(()=>{On()})),Ln.today.addEventListener("click",(()=>{zn()})),Ln.thisWeek.addEventListener("click",(()=>{Zn()})),Ln.saveTask.addEventListener("click",(()=>{Ln.taskTitle.value.length<1?alert("Please give a title to your task."):Ln.taskDate.value?(()=>{const n=Ln.saveTask.getAttribute("id");""!=n?((n,e,t,r,a,i)=>{let o=En.findIndex((e=>e.id===n));o>=0&&(En[o].title=e,En[o].description=t,En[o].project=r,En[o].date=a,En[o].priority=i,localStorage.tasks=JSON.stringify(En))})(n,Ln.taskTitle.value,Ln.taskDescription.value,Ln.taskProject.value,Ln.taskDate.value,Ln.taskPriority.value):((n,e,t,r,a)=>{if(En.length>=1e6)alert("Task limit reached: 1 million tasks");else{let i="",o=!0;for(;o;)i=Math.floor(1e6*Math.random()).toString(),o=!1,En.forEach((n=>{n.id===i&&(o=!0)}));const s=(({title:n,description:e,project:t,date:r,priority:a,id:i})=>({title:n,description:e,project:t,date:r,priority:a,id:i}))({title:n,description:e,project:t,date:r,priority:a,id:i});En.push(s),localStorage.tasks=JSON.stringify(En)}})(Ln.taskTitle.value,Ln.taskDescription.value,Ln.taskProject.value,Ln.taskDate.value,Ln.taskPriority.value),Dn(""),qn()})():alert("Please pick a due date.")})),Ln.saveProject.addEventListener("click",(()=>{if(Ln.projectName.value.length<1)return void alert("Please give a name to your project.");let n=!1;e().forEach((e=>{e.name===Ln.projectName.value&&(alert("A project with this name already exists. Please use another name."),n=!0)})),n||Wn()}));const Qn=n=>{const t=document.querySelector(".project-container");t.replaceChildren();const r=document.getElementById("task-form-project");r.replaceChildren();const a=document.createElement("option");a.setAttribute("value",""),a.textContent="",r.appendChild(a),n.forEach((n=>{const a=document.createElement("div");a.classList.add("single-project");const i=document.createElement("div");i.classList.add("project-name"),i.setAttribute("id",n.id),i.textContent=n.name,i.addEventListener("click",(n=>{(n=>{window.innerWidth<=420&&"block"===Ln.sidePanel.style.display&&Sn();let t=e(),r=t.findIndex((e=>e.id===n)),a=t[r].name;Ln.domTasksTitle.textContent=`Project: ${a}`,Xn((n=>{let e=Tn(Yn()),t=[];return e.forEach((e=>{e.project===n&&t.push(e)})),t})(a))})(n.target.id)}));const o=document.createElement("div");o.classList.add("edit-project"),o.setAttribute("id",n.id);const s=document.createElement("span");s.classList.add("material-icons","md-18"),s.setAttribute("id",n.id),s.textContent="edit_note",o.appendChild(s),o.addEventListener("click",(n=>{Pn(n.target.id)}));const A=document.createElement("div");A.classList.add("delete-project"),A.setAttribute("id",n.id);const l=document.createElement("span");l.classList.add("material-icons","md-18"),l.setAttribute("id",n.id),l.textContent="delete",A.appendChild(l),A.addEventListener("click",(n=>{Un(n.target.id)})),a.appendChild(i),a.appendChild(o),a.appendChild(A),t.appendChild(a);const d=document.createElement("option");d.setAttribute("value",n.name),d.textContent=n.name,r.appendChild(d)}))},Xn=n=>{const e=document.querySelector(".task-container");e.replaceChildren(),n.forEach((n=>{const t=document.createElement("div");t.classList.add("task-card");const r=document.createElement("div");r.classList.add(`priority-${n.priority}`);const a=document.createElement("div");a.classList.add("task-title"),a.setAttribute("id",n.id),a.textContent=n.title,a.addEventListener("click",(n=>{(n=>{window.innerWidth<=420&&"block"===Ln.sidePanel.style.display&&Sn();let e=Yn(),t=e.findIndex((e=>e.id===n)),r=e[t];Ln.taskDetailsTitle.textContent=r.title,Ln.taskDetailsDescription.textContent=r.description,Ln.taskDetailsPriority.textContent=`Priority: ${r.priority}`,Ln.taskDetailsDate.textContent=`Due date: ${r.date}`,Ln.taskDetailsProject.textContent=`Project: ${r.project}`,Ln.taskDetailsOkButton.addEventListener("click",(()=>{document.querySelector(".task-details").style.display="none"})),document.querySelector(".task-details").style.display="flex"})(n.target.id)}));const i=document.createElement("div");i.classList.add("edit-task"),i.setAttribute("id",n.id);const o=document.createElement("span");o.classList.add("material-icons","md-18"),o.setAttribute("id",n.id),o.textContent="edit_note",i.appendChild(o),i.addEventListener("click",(n=>{Dn(n.target.id)}));const s=document.createElement("div");s.classList.add("delete-task"),s.setAttribute("id",n.id);const A=document.createElement("span");A.classList.add("material-icons","md-18"),A.setAttribute("id",n.id),A.textContent="delete",s.appendChild(A),s.addEventListener("click",(n=>{Mn(n.target.id)})),t.appendChild(r),t.appendChild(a),t.appendChild(i),t.appendChild(s),e.appendChild(t)}))};var Fn=t(379),Hn=t.n(Fn),Rn=t(795),Jn=t.n(Rn),Gn=t(569),Vn=t.n(Gn),$n=t(565),_n=t.n($n),Kn=t(216),ne=t.n(Kn),ee=t(589),te=t.n(ee),re=t(426),ae={};ae.styleTagTransform=te(),ae.setAttributes=_n(),ae.insert=Vn().bind(null,"head"),ae.domAPI=Jn(),ae.insertStyleElement=ne(),Hn()(re.Z,ae),re.Z&&re.Z.locals&&re.Z.locals})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,